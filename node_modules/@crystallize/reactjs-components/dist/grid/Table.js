"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const grid_renderer_utils_1 = require("./grid-renderer-utils");
const Table = ({ cellComponent, grid, children, dimensions, styleForCell, ...props }) => {
    const CellComponent = cellComponent;
    return ((0, jsx_runtime_1.jsxs)("table", { className: "crystallize-grid crystallize-grid--table", ...props, children: [(0, jsx_runtime_1.jsx)("thead", { children: (0, jsx_runtime_1.jsx)("tr", { children: new Array(dimensions.cols).fill(0).map((v, i) => ((0, jsx_runtime_1.jsx)("th", {}, `th-${i}`))) }) }), (0, jsx_runtime_1.jsxs)("tbody", { children: [children && children({ grid, dimensions }), !children &&
                        grid.map((row, rowIndex) => {
                            return ((0, jsx_runtime_1.jsx)("tr", { className: (0, grid_renderer_utils_1.getPositionnablRowClassNames)({ rowIndex }, dimensions), children: row.columns.map((cell, cellIndex) => {
                                    const cellStyles = styleForCell ? styleForCell(cell, {}) || {} : {};
                                    const classes = (0, grid_renderer_utils_1.getPositionnableCellClassNames)(cell, dimensions);
                                    return ((0, jsx_runtime_1.jsx)("td", { className: `crystallize-grid__cell ${classes}`, style: cellStyles, rowSpan: cell.layout.rowspan, colSpan: cell.layout.colspan, children: (0, jsx_runtime_1.jsx)(CellComponent, { cell: cell, dimensions: dimensions }) }, `cell-${rowIndex}-${cellIndex}`));
                                }) }, `row-${rowIndex}`));
                        })] })] }));
};
exports.Table = Table;
//# sourceMappingURL=Table.js.map