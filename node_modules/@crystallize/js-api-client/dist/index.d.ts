export * from './core/client';
export * from './core/massCallClient';
export * from './core/navigation';
export * from './core/hydrate';
export * from './core/catalogue';
export * from './core/order';
export * from './core/search';
export * from './core/subscription';
export * from './core/customer';
export * from './core/pricing';
export * from './types/product';
export * from './types/order';
export * from './types/payment';
export * from './types/components';
export * from './types/search';
export * from './types/subscription';
export * from './types/address';
export * from './types/customer';
export * from './types/signature';
export * from './types/pricing';
export declare const CrystallizeClient: import("./core/client").ClientInterface;
export declare const CrystallizeNavigationFoldersFetcher: import("./core/navigation").TreeFetcher;
export declare const CrystallizeNavigationTopicsFetcher: import("./core/navigation").TreeFetcher;
export declare const CrystallizeHydraterByPaths: import("./core/hydrate").ProductHydrater;
export declare const CrystallizeHydraterBySkus: import("./core/hydrate").ProductHydrater;
export declare const CrystallizeOrderPusher: (intentOrder: {
    meta?: {
        value: string;
        key: string;
    }[] | undefined;
    payment?: {
        custom?: {
            properties?: {
                value?: string | undefined;
                property: string;
            }[] | undefined;
        } | undefined;
        klarna?: {
            status?: string | undefined;
            klarna?: string | undefined;
            orderId?: string | undefined;
            recurringToken?: string | undefined;
            merchantReference1?: string | undefined;
            merchantReference2?: string | undefined;
            metadata?: string | undefined;
        } | undefined;
        stripe?: {
            stripe?: string | undefined;
            orderId?: string | undefined;
            metadata?: string | undefined;
            subscriptionId?: string | undefined;
            customerId?: string | undefined;
            paymentMethod?: string | undefined;
            paymentMethodId?: string | undefined;
            paymentIntentId?: string | undefined;
        } | undefined;
        paypal?: {
            paypal?: string | undefined;
            orderId?: string | undefined;
            metadata?: string | undefined;
            subscriptionId?: string | undefined;
            invoiceId?: string | undefined;
        } | undefined;
        cash?: {
            cash?: string | undefined;
        } | undefined;
        provider: import("json-to-graphql-query/lib/types/EnumType").EnumType;
    }[] | undefined;
    total?: {
        gross?: number | undefined;
        net?: number | undefined;
        discounts?: {
            percent?: number | undefined;
        }[] | undefined;
        currency: string;
        tax: {
            name?: string | undefined;
            percent?: number | undefined;
        };
    } | undefined;
    additionnalInformation?: string | undefined;
    createdAt?: Date | undefined;
    customer: {
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        identifier?: string | undefined;
        birthDate?: Date | undefined;
        companyName?: string | undefined;
        taxNumber?: string | undefined;
        addresses?: {
            firstName?: string | undefined;
            middleName?: string | undefined;
            lastName?: string | undefined;
            street?: string | undefined;
            street2?: string | undefined;
            streetNumber?: string | undefined;
            postalCode?: string | undefined;
            city?: string | undefined;
            state?: string | undefined;
            country?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
            type: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        }[] | undefined;
    };
    cart: {
        meta?: {
            value: string;
            key: string;
        }[] | undefined;
        price?: {
            gross?: number | undefined;
            net?: number | undefined;
            discounts?: {
                percent?: number | undefined;
            }[] | undefined;
            currency: string;
            tax: {
                name?: string | undefined;
                percent?: number | undefined;
            };
        } | undefined;
        sku?: string | undefined;
        productId?: string | undefined;
        productVariantId?: string | undefined;
        imageUrl?: string | undefined;
        subscription?: {
            name?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            meteredVariables?: {
                id: string;
                usage: number;
                price: number;
            }[] | undefined;
            period: number;
            unit: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        } | undefined;
        subscriptionContractId?: string | undefined;
        subTotal?: {
            gross?: number | undefined;
            net?: number | undefined;
            discounts?: {
                percent?: number | undefined;
            }[] | undefined;
            currency: string;
            tax: {
                name?: string | undefined;
                percent?: number | undefined;
            };
        } | undefined;
        name: string;
        quantity: number;
    }[];
}) => Promise<import("./types/order").OrderCreatedConfirmation>;
export declare const CrystallizeCreateOrderPaymentUpdater: (orderId: string, intentOrder: {
    meta?: {
        value: string;
        key: string;
    }[] | undefined;
    customer?: {
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        identifier?: string | undefined;
        birthDate?: Date | undefined;
        companyName?: string | undefined;
        taxNumber?: string | undefined;
        addresses?: {
            firstName?: string | undefined;
            middleName?: string | undefined;
            lastName?: string | undefined;
            street?: string | undefined;
            street2?: string | undefined;
            streetNumber?: string | undefined;
            postalCode?: string | undefined;
            city?: string | undefined;
            state?: string | undefined;
            country?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
            type: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        }[] | undefined;
    } | undefined;
    cart?: {
        meta?: {
            value: string;
            key: string;
        }[] | undefined;
        price?: {
            gross?: number | undefined;
            net?: number | undefined;
            discounts?: {
                percent?: number | undefined;
            }[] | undefined;
            currency: string;
            tax: {
                name?: string | undefined;
                percent?: number | undefined;
            };
        } | undefined;
        sku?: string | undefined;
        productId?: string | undefined;
        productVariantId?: string | undefined;
        imageUrl?: string | undefined;
        subscription?: {
            name?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            meteredVariables?: {
                id: string;
                usage: number;
                price: number;
            }[] | undefined;
            period: number;
            unit: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        } | undefined;
        subscriptionContractId?: string | undefined;
        subTotal?: {
            gross?: number | undefined;
            net?: number | undefined;
            discounts?: {
                percent?: number | undefined;
            }[] | undefined;
            currency: string;
            tax: {
                name?: string | undefined;
                percent?: number | undefined;
            };
        } | undefined;
        name: string;
        quantity: number;
    }[] | undefined;
    payment?: {
        custom?: {
            properties?: {
                value?: string | undefined;
                property: string;
            }[] | undefined;
        } | undefined;
        klarna?: {
            status?: string | undefined;
            klarna?: string | undefined;
            orderId?: string | undefined;
            recurringToken?: string | undefined;
            merchantReference1?: string | undefined;
            merchantReference2?: string | undefined;
            metadata?: string | undefined;
        } | undefined;
        stripe?: {
            stripe?: string | undefined;
            orderId?: string | undefined;
            metadata?: string | undefined;
            subscriptionId?: string | undefined;
            customerId?: string | undefined;
            paymentMethod?: string | undefined;
            paymentMethodId?: string | undefined;
            paymentIntentId?: string | undefined;
        } | undefined;
        paypal?: {
            paypal?: string | undefined;
            orderId?: string | undefined;
            metadata?: string | undefined;
            subscriptionId?: string | undefined;
            invoiceId?: string | undefined;
        } | undefined;
        cash?: {
            cash?: string | undefined;
        } | undefined;
        provider: import("json-to-graphql-query/lib/types/EnumType").EnumType;
    }[] | undefined;
    total?: {
        gross?: number | undefined;
        net?: number | undefined;
        discounts?: {
            percent?: number | undefined;
        }[] | undefined;
        currency: string;
        tax: {
            name?: string | undefined;
            percent?: number | undefined;
        };
    } | undefined;
    additionnalInformation?: string | undefined;
}) => Promise<import("./types/order").OrderUpdatedConfirmation>;
export declare const CrystallizeCatalogueFetcher: <T>(query: any, variables?: import("./core/client").VariablesType | undefined) => Promise<T>;
export declare const CrystallizeSearcher: {
    search: (language: string, nodeQuery: any, filter?: {
        type?: import("json-to-graphql-query/lib/types/EnumType").EnumType | undefined;
        searchTerm?: string | undefined;
        include?: {
            skus?: string | undefined;
            itemIds?: string | undefined;
            productVariantIds?: string | undefined;
            shapeIdentifiers?: string | undefined;
            paths?: string | undefined;
            topicsPaths?: {
                logicalOperator: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                sections: {
                    fields?: {
                        value: string;
                    }[] | undefined;
                    logicalOperator: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                }[];
            } | undefined;
        } | undefined;
        exclude?: {
            skus?: string | undefined;
            itemIds?: string | undefined;
            productVariantIds?: string | undefined;
            shapeIdentifiers?: string | undefined;
            paths?: string | undefined;
            topicsPaths?: {
                logicalOperator: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                sections: {
                    fields?: {
                        value: string;
                    }[] | undefined;
                    logicalOperator: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                }[];
            } | undefined;
        } | undefined;
        priceVariant?: string | undefined;
        stockLocation?: string | undefined;
        productVariants?: {
            isDefault?: boolean | undefined;
            priceRange?: {
                min: number;
                max: number;
            } | undefined;
            stock?: {
                location?: string | undefined;
                min: number;
            } | undefined;
            stockLocations?: {
                location?: string[] | undefined;
                logicalOperator: "OR";
                min: number;
            } | undefined;
            attributes?: {
                value: string;
                attribute: string;
            } | undefined;
        } | undefined;
    } | undefined, orderBy?: {
        field: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        direction: import("json-to-graphql-query/lib/types/EnumType").EnumType;
    } | undefined, pageInfo?: any, limit?: {
        perPage?: number | undefined;
        total?: number | undefined;
    } | undefined, cursors?: {
        before?: string | undefined;
        after?: string | undefined;
    } | undefined) => AsyncIterableIterator<any>;
};
export declare const CrystallizeOrderFetcherById: (orderId: string, onCustomer?: any, onOrderItem?: any, extraQuery?: any) => Promise<import("./types/order").Order>;
export declare const CrystallizeOrderFetcherByCustomerIdentifier: (customerIdentifier: string, extraQueryArgs?: any, onCustomer?: any, onOrderItem?: any, extraQuery?: any) => Promise<{
    pageInfo: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor: string;
        endCursor: string;
        totalNodes: number;
    };
    orders: import("./types/order").Order[];
}>;
export declare const CrystallizeSubscriptionContractManager: {
    create: (intentSubsctiptionContract: {
        initial?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        recurring?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        addresses?: {
            firstName?: string | undefined;
            middleName?: string | undefined;
            lastName?: string | undefined;
            street?: string | undefined;
            street2?: string | undefined;
            streetNumber?: string | undefined;
            postalCode?: string | undefined;
            city?: string | undefined;
            state?: string | undefined;
            country?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
            type: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        }[] | undefined;
        payment?: {
            custom?: {
                properties?: {
                    value?: string | undefined;
                    property: string;
                }[] | undefined;
            } | undefined;
            klarna?: {
                status?: string | undefined;
                klarna?: string | undefined;
                orderId?: string | undefined;
                recurringToken?: string | undefined;
                merchantReference1?: string | undefined;
                merchantReference2?: string | undefined;
                metadata?: string | undefined;
            } | undefined;
            stripe?: {
                stripe?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                customerId?: string | undefined;
                paymentMethod?: string | undefined;
                paymentMethodId?: string | undefined;
                paymentIntentId?: string | undefined;
            } | undefined;
            paypal?: {
                paypal?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                invoiceId?: string | undefined;
            } | undefined;
            cash?: {
                cash?: string | undefined;
            } | undefined;
            provider: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        } | undefined;
        subscriptionPlan?: {
            identifier: string;
            periodId: string;
        } | undefined;
        tenantId: string;
        status: {
            price: number;
            currency: string;
            activeUntil: Date;
            renewAt: Date;
        };
        customerIdentifier: string;
        item: {
            meta?: {
                value: string;
                key: string;
            }[] | undefined;
            imageUrl?: string | undefined;
            name: string;
            sku: string;
        };
    }, extraResultQuery?: any) => Promise<any>;
    update: (id: string, intentSubsctiptionContract: {
        status?: {
            price?: number | undefined;
            currency?: string | undefined;
            activeUntil?: Date | undefined;
            renewAt?: Date | undefined;
        } | undefined;
        initial?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        recurring?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        addresses?: {
            firstName?: string | undefined;
            middleName?: string | undefined;
            lastName?: string | undefined;
            street?: string | undefined;
            street2?: string | undefined;
            streetNumber?: string | undefined;
            postalCode?: string | undefined;
            city?: string | undefined;
            state?: string | undefined;
            country?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
            type: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        }[] | undefined;
        payment?: {
            custom?: {
                properties?: {
                    value?: string | undefined;
                    property: string;
                }[] | undefined;
            } | undefined;
            klarna?: {
                status?: string | undefined;
                klarna?: string | undefined;
                orderId?: string | undefined;
                recurringToken?: string | undefined;
                merchantReference1?: string | undefined;
                merchantReference2?: string | undefined;
                metadata?: string | undefined;
            } | undefined;
            stripe?: {
                stripe?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                customerId?: string | undefined;
                paymentMethod?: string | undefined;
                paymentMethodId?: string | undefined;
                paymentIntentId?: string | undefined;
            } | undefined;
            paypal?: {
                paypal?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                invoiceId?: string | undefined;
            } | undefined;
            cash?: {
                cash?: string | undefined;
            } | undefined;
            provider: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        } | undefined;
        item?: {
            meta?: {
                value: string;
                key: string;
            }[] | undefined;
            name?: string | undefined;
            sku?: string | undefined;
            imageUrl?: string | undefined;
        } | undefined;
    }, extraResultQuery?: any) => Promise<any>;
    createSubscriptionContractTemplateBasedOnVariantIdentity: (path: string, productVariantIdentifier: {
        sku?: string | undefined;
        id?: string | undefined;
    }, planIdentifier: string, periodId: string, priceVariantIdentifier: string, language?: string) => Promise<Omit<{
        initial?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        recurring?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        addresses?: {
            firstName?: string | undefined;
            middleName?: string | undefined;
            lastName?: string | undefined;
            street?: string | undefined;
            street2?: string | undefined;
            streetNumber?: string | undefined;
            postalCode?: string | undefined;
            city?: string | undefined;
            state?: string | undefined;
            country?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
            type: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        }[] | undefined;
        payment?: {
            custom?: {
                properties?: {
                    value?: string | undefined;
                    property: string;
                }[] | undefined;
            } | undefined;
            klarna?: {
                status?: string | undefined;
                klarna?: string | undefined;
                orderId?: string | undefined;
                recurringToken?: string | undefined;
                merchantReference1?: string | undefined;
                merchantReference2?: string | undefined;
                metadata?: string | undefined;
            } | undefined;
            stripe?: {
                stripe?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                customerId?: string | undefined;
                paymentMethod?: string | undefined;
                paymentMethodId?: string | undefined;
                paymentIntentId?: string | undefined;
            } | undefined;
            paypal?: {
                paypal?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                invoiceId?: string | undefined;
            } | undefined;
            cash?: {
                cash?: string | undefined;
            } | undefined;
            provider: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        } | undefined;
        subscriptionPlan?: {
            identifier: string;
            periodId: string;
        } | undefined;
        tenantId: string;
        status: {
            price: number;
            currency: string;
            activeUntil: Date;
            renewAt: Date;
        };
        customerIdentifier: string;
        item: {
            meta?: {
                value: string;
                key: string;
            }[] | undefined;
            imageUrl?: string | undefined;
            name: string;
            sku: string;
        };
    }, "tenantId" | "status" | "addresses" | "payment" | "customerIdentifier">>;
    createSubscriptionContractTemplateBasedOnVariant: (variant: import("./types/product").ProductVariant, planIdentifier: string, periodId: string, priceVariantIdentifier: string) => Promise<Omit<{
        initial?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        recurring?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query/lib/types/EnumType").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        addresses?: {
            firstName?: string | undefined;
            middleName?: string | undefined;
            lastName?: string | undefined;
            street?: string | undefined;
            street2?: string | undefined;
            streetNumber?: string | undefined;
            postalCode?: string | undefined;
            city?: string | undefined;
            state?: string | undefined;
            country?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
            type: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        }[] | undefined;
        payment?: {
            custom?: {
                properties?: {
                    value?: string | undefined;
                    property: string;
                }[] | undefined;
            } | undefined;
            klarna?: {
                status?: string | undefined;
                klarna?: string | undefined;
                orderId?: string | undefined;
                recurringToken?: string | undefined;
                merchantReference1?: string | undefined;
                merchantReference2?: string | undefined;
                metadata?: string | undefined;
            } | undefined;
            stripe?: {
                stripe?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                customerId?: string | undefined;
                paymentMethod?: string | undefined;
                paymentMethodId?: string | undefined;
                paymentIntentId?: string | undefined;
            } | undefined;
            paypal?: {
                paypal?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                invoiceId?: string | undefined;
            } | undefined;
            cash?: {
                cash?: string | undefined;
            } | undefined;
            provider: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        } | undefined;
        subscriptionPlan?: {
            identifier: string;
            periodId: string;
        } | undefined;
        tenantId: string;
        status: {
            price: number;
            currency: string;
            activeUntil: Date;
            renewAt: Date;
        };
        customerIdentifier: string;
        item: {
            meta?: {
                value: string;
                key: string;
            }[] | undefined;
            imageUrl?: string | undefined;
            name: string;
            sku: string;
        };
    }, "tenantId" | "status" | "addresses" | "payment" | "customerIdentifier">>;
};
export declare const CrystallizeCustomerManager: {
    create: (intentCustomer: {
        tenantId?: string | undefined;
        middleName?: string | undefined;
        phone?: string | undefined;
        identifier?: string | undefined;
        birthDate?: Date | undefined;
        companyName?: string | undefined;
        taxNumber?: string | undefined;
        addresses?: {
            firstName?: string | undefined;
            middleName?: string | undefined;
            lastName?: string | undefined;
            street?: string | undefined;
            street2?: string | undefined;
            streetNumber?: string | undefined;
            postalCode?: string | undefined;
            city?: string | undefined;
            state?: string | undefined;
            country?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
            type: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        }[] | undefined;
        meta?: {
            value?: string | undefined;
            key: string;
        }[] | undefined;
        externalReferences?: {
            value?: string | undefined;
            key: string;
        }[] | undefined;
        firstName: string;
        lastName: string;
        email: string;
    }, extraResultQuery?: any) => Promise<any>;
    update: (identifier: string, intentCustomer: {
        middleName?: string | undefined;
        phone?: string | undefined;
        birthDate?: Date | undefined;
        companyName?: string | undefined;
        taxNumber?: string | undefined;
        addresses?: {
            firstName?: string | undefined;
            middleName?: string | undefined;
            lastName?: string | undefined;
            street?: string | undefined;
            street2?: string | undefined;
            streetNumber?: string | undefined;
            postalCode?: string | undefined;
            city?: string | undefined;
            state?: string | undefined;
            country?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
            type: import("json-to-graphql-query/lib/types/EnumType").EnumType;
        }[] | undefined;
        meta?: {
            value?: string | undefined;
            key: string;
        }[] | undefined;
        externalReferences?: {
            value?: string | undefined;
            key: string;
        }[] | undefined;
        firstName: string;
        lastName: string;
        email: string;
    }, extraResultQuery?: any) => Promise<any>;
};
