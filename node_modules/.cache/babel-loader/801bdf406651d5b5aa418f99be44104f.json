{"ast":null,"code":"'use strict';\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar util = require('util');\nvar _require = require('triple-beam'),\n  SPLAT = _require.SPLAT;\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */\n\nvar formatRegExp = /%[scdjifoO%]/g;\n/**\n * Captures the number of escaped % signs in a format string (i.e. %s strings).\n * @type {RegExp}\n */\n\nvar escapedPercent = /%%/g;\nvar Splatter = /*#__PURE__*/\nfunction () {\n  function Splatter(opts) {\n    _classCallCheck(this, Splatter);\n    this.options = opts;\n  }\n  /**\n     * Check to see if tokens <= splat.length, assign { splat, meta } into the\n     * `info` accordingly, and write to this instance.\n     *\n     * @param  {Info} info Logform info message.\n     * @param  {String[]} tokens Set of string interpolation tokens.\n     * @returns {Info} Modified info message\n     * @private\n     */\n\n  _createClass(Splatter, [{\n    key: \"_splat\",\n    value: function _splat(info, tokens) {\n      var msg = info.message;\n      var splat = info[SPLAT] || info.splat || [];\n      var percents = msg.match(escapedPercent);\n      var escapes = percents && percents.length || 0; // The expected splat is the number of tokens minus the number of escapes\n      // e.g.\n      // - { expectedSplat: 3 } '%d %s %j'\n      // - { expectedSplat: 5 } '[%s] %d%% %d%% %s %j'\n      //\n      // Any \"meta\" will be arugments in addition to the expected splat size\n      // regardless of type. e.g.\n      //\n      // logger.log('info', '%d%% %s %j', 100, 'wow', { such: 'js' }, { thisIsMeta: true });\n      // would result in splat of four (4), but only three (3) are expected. Therefore:\n      //\n      // extraSplat = 3 - 4 = -1\n      // metas = [100, 'wow', { such: 'js' }, { thisIsMeta: true }].splice(-1, -1 * -1);\n      // splat = [100, 'wow', { such: 'js' }]\n\n      var expectedSplat = tokens.length - escapes;\n      var extraSplat = expectedSplat - splat.length;\n      var metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : []; // Now that { splat } has been separated from any potential { meta }. we\n      // can assign this to the `info` object and write it to our format stream.\n      // If the additional metas are **NOT** objects or **LACK** enumerable properties\n      // you are going to have a bad time.\n\n      var metalen = metas.length;\n      if (metalen) {\n        for (var i = 0; i < metalen; i++) {\n          Object.assign(info, metas[i]);\n        }\n      }\n      info.message = util.format.apply(util, [msg].concat(_toConsumableArray(splat)));\n      return info;\n    }\n    /**\n      * Transforms the `info` message by using `util.format` to complete\n      * any `info.message` provided it has string interpolation tokens.\n      * If no tokens exist then `info` is immutable.\n      *\n      * @param  {Info} info Logform info message.\n      * @param  {Object} opts Options for this instance.\n      * @returns {Info} Modified info message\n      */\n  }, {\n    key: \"transform\",\n    value: function transform(info) {\n      var msg = info.message;\n      var splat = info[SPLAT] || info.splat; // No need to process anything if splat is undefined\n\n      if (!splat || !splat.length) {\n        return info;\n      } // Extract tokens, if none available default to empty array to\n      // ensure consistancy in expected results\n\n      var tokens = msg && msg.match && msg.match(formatRegExp); // This condition will take care of inputs with info[SPLAT]\n      // but no tokens present\n\n      if (!tokens && (splat || splat.length)) {\n        var metas = splat.length > 1 ? splat.splice(0) : splat; // Now that { splat } has been separated from any potential { meta }. we\n        // can assign this to the `info` object and write it to our format stream.\n        // If the additional metas are **NOT** objects or **LACK** enumerable properties\n        // you are going to have a bad time.\n\n        var metalen = metas.length;\n        if (metalen) {\n          for (var i = 0; i < metalen; i++) {\n            Object.assign(info, metas[i]);\n          }\n        }\n        return info;\n      }\n      if (tokens) {\n        return this._splat(info, tokens);\n      }\n      return info;\n    }\n  }]);\n  return Splatter;\n}();\n/*\n * function splat (info)\n * Returns a new instance of the splat format TransformStream\n * which performs string interpolation from `info` objects. This was\n * previously exposed implicitly in `winston < 3.0.0`.\n */\n\nmodule.exports = function (opts) {\n  return new Splatter(opts);\n};","map":null,"metadata":{},"sourceType":"script"}