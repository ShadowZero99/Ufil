{"ast":null,"code":"import { useRef, useEffect } from 'react';\nfunction useTimeout(callback, delay) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    autoInvoke: false\n  };\n  var timeoutRef = useRef(null);\n  var start = function start() {\n    for (var _len = arguments.length, callbackParams = new Array(_len), _key = 0; _key < _len; _key++) {\n      callbackParams[_key] = arguments[_key];\n    }\n    if (!timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(function () {\n        callback(callbackParams);\n        timeoutRef.current = null;\n      }, delay);\n    }\n  };\n  var clear = function clear() {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n  useEffect(function () {\n    if (options.autoInvoke) {\n      start();\n    }\n    return clear;\n  }, [delay]);\n  return {\n    start: start,\n    clear: clear\n  };\n}\nexport { useTimeout };","map":null,"metadata":{},"sourceType":"module"}