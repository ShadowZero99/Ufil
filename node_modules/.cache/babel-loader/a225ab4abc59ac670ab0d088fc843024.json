{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\PC\\\\OneDrive\\\\Desktop\\\\ufil\\\\ufil\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nmodule.exports = writeFile;\nmodule.exports.sync = writeFileSync;\nmodule.exports._getTmpname = getTmpname; // for testing\nmodule.exports._cleanupOnExit = cleanupOnExit;\nvar fs = require('fs');\nvar MurmurHash3 = require('imurmurhash');\nvar onExit = require('signal-exit');\nvar path = require('path');\nvar isTypedArray = require('is-typedarray');\nvar typedArrayToBuffer = require('typedarray-to-buffer');\nvar _require = require('util'),\n  promisify = _require.promisify;\nvar activeFiles = {};\n\n// if we run inside of a worker_thread, `process.pid` is not unique\n/* istanbul ignore next */\nvar threadId = function getId() {\n  try {\n    var workerThreads = require('worker_threads');\n\n    /// if we are in main thread, this is set to `0`\n    return workerThreads.threadId;\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0;\n  }\n}();\nvar invocations = 0;\nfunction getTmpname(filename) {\n  return filename + '.' + MurmurHash3(__filename).hash(String(process.pid)).hash(String(threadId)).hash(String(++invocations)).result();\n}\nfunction cleanupOnExit(tmpfile) {\n  return function () {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile);\n    } catch (_) {}\n  };\n}\nfunction serializeActiveFile(absoluteName) {\n  return new Promise(function (resolve) {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = [];\n    activeFiles[absoluteName].push(resolve); // add this job to the queue\n    if (activeFiles[absoluteName].length === 1) resolve(); // kick off the first one\n  });\n}\n\n// https://github.com/isaacs/node-graceful-fs/blob/master/polyfills.js#L315-L342\nfunction isChownErrOk(err) {\n  if (err.code === 'ENOSYS') {\n    return true;\n  }\n  var nonroot = !process.getuid || process.getuid() !== 0;\n  if (nonroot) {\n    if (err.code === 'EINVAL' || err.code === 'EPERM') {\n      return true;\n    }\n  }\n  return false;\n}\nfunction writeFileAsync(_x, _x2) {\n  return _writeFileAsync.apply(this, arguments);\n}\nfunction _writeFileAsync() {\n  _writeFileAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(filename, data) {\n    var options,\n      fd,\n      tmpfile,\n      removeOnExitHandler,\n      absoluteName,\n      truename,\n      stats,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            if (typeof options === 'string') {\n              options = {\n                encoding: options\n              };\n            }\n            /* istanbul ignore next -- The closure only gets called when onExit triggers */\n            removeOnExitHandler = onExit(cleanupOnExit(function () {\n              return tmpfile;\n            }));\n            absoluteName = path.resolve(filename);\n            _context.prev = 4;\n            _context.next = 7;\n            return serializeActiveFile(absoluteName);\n          case 7:\n            _context.next = 9;\n            return promisify(fs.realpath)(filename).catch(function () {\n              return filename;\n            });\n          case 9:\n            truename = _context.sent;\n            tmpfile = getTmpname(truename);\n            if (!(!options.mode || !options.chown)) {\n              _context.next = 16;\n              break;\n            }\n            _context.next = 14;\n            return promisify(fs.stat)(truename).catch(function () {});\n          case 14:\n            stats = _context.sent;\n            if (stats) {\n              if (options.mode == null) {\n                options.mode = stats.mode;\n              }\n              if (options.chown == null && process.getuid) {\n                options.chown = {\n                  uid: stats.uid,\n                  gid: stats.gid\n                };\n              }\n            }\n          case 16:\n            _context.next = 18;\n            return promisify(fs.open)(tmpfile, 'w', options.mode);\n          case 18:\n            fd = _context.sent;\n            if (!options.tmpfileCreated) {\n              _context.next = 22;\n              break;\n            }\n            _context.next = 22;\n            return options.tmpfileCreated(tmpfile);\n          case 22:\n            if (isTypedArray(data)) {\n              data = typedArrayToBuffer(data);\n            }\n            if (!Buffer.isBuffer(data)) {\n              _context.next = 28;\n              break;\n            }\n            _context.next = 26;\n            return promisify(fs.write)(fd, data, 0, data.length, 0);\n          case 26:\n            _context.next = 31;\n            break;\n          case 28:\n            if (!(data != null)) {\n              _context.next = 31;\n              break;\n            }\n            _context.next = 31;\n            return promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'));\n          case 31:\n            if (!(options.fsync !== false)) {\n              _context.next = 34;\n              break;\n            }\n            _context.next = 34;\n            return promisify(fs.fsync)(fd);\n          case 34:\n            _context.next = 36;\n            return promisify(fs.close)(fd);\n          case 36:\n            fd = null;\n            if (!options.chown) {\n              _context.next = 40;\n              break;\n            }\n            _context.next = 40;\n            return promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid).catch(function (err) {\n              if (!isChownErrOk(err)) {\n                throw err;\n              }\n            });\n          case 40:\n            if (!options.mode) {\n              _context.next = 43;\n              break;\n            }\n            _context.next = 43;\n            return promisify(fs.chmod)(tmpfile, options.mode).catch(function (err) {\n              if (!isChownErrOk(err)) {\n                throw err;\n              }\n            });\n          case 43:\n            _context.next = 45;\n            return promisify(fs.rename)(tmpfile, truename);\n          case 45:\n            _context.prev = 45;\n            if (!fd) {\n              _context.next = 49;\n              break;\n            }\n            _context.next = 49;\n            return promisify(fs.close)(fd).catch( /* istanbul ignore next */\n            function () {});\n          case 49:\n            removeOnExitHandler();\n            _context.next = 52;\n            return promisify(fs.unlink)(tmpfile).catch(function () {});\n          case 52:\n            activeFiles[absoluteName].shift(); // remove the element added by serializeSameFile\n            if (activeFiles[absoluteName].length > 0) {\n              activeFiles[absoluteName][0](); // start next job if one is pending\n            } else delete activeFiles[absoluteName];\n            return _context.finish(45);\n          case 55:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4,, 45, 55]]);\n  }));\n  return _writeFileAsync.apply(this, arguments);\n}\nfunction writeFile(filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options;\n    options = {};\n  }\n  var promise = writeFileAsync(filename, data, options);\n  if (callback) {\n    promise.then(callback, callback);\n  }\n  return promise;\n}\nfunction writeFileSync(filename, data, options) {\n  if (typeof options === 'string') options = {\n    encoding: options\n  };else if (!options) options = {};\n  try {\n    filename = fs.realpathSync(filename);\n  } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n  }\n  var tmpfile = getTmpname(filename);\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      var stats = fs.statSync(filename);\n      options = Object.assign({}, options);\n      if (!options.mode) {\n        options.mode = stats.mode;\n      }\n      if (!options.chown && process.getuid) {\n        options.chown = {\n          uid: stats.uid,\n          gid: stats.gid\n        };\n      }\n    } catch (ex) {\n      // ignore stat errors\n    }\n  }\n  var fd;\n  var cleanup = cleanupOnExit(tmpfile);\n  var removeOnExitHandler = onExit(cleanup);\n  var threw = true;\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode || 438);\n    if (options.tmpfileCreated) {\n      options.tmpfileCreated(tmpfile);\n    }\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data);\n    }\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd);\n    }\n    fs.closeSync(fd);\n    fd = null;\n    if (options.chown) {\n      try {\n        fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err;\n        }\n      }\n    }\n    if (options.mode) {\n      try {\n        fs.chmodSync(tmpfile, options.mode);\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err;\n        }\n      }\n    }\n    fs.renameSync(tmpfile, filename);\n    threw = false;\n  } finally {\n    if (fd) {\n      try {\n        fs.closeSync(fd);\n      } catch (ex) {\n        // ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n    removeOnExitHandler();\n    if (threw) {\n      cleanup();\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}