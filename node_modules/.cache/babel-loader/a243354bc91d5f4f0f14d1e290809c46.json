{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\PC\\\\OneDrive\\\\Desktop\\\\ufil\\\\ufil\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { forwardRef, useState, useEffect, useMemo } from 'react';\nimport { usePrevious } from '@mantine/hooks';\nimport { MachineNumber } from './MachineNumber.js';\nimport useStyles from './Machine.styles.js';\nvar Machine = forwardRef(function (_ref, ref) {\n  var _ref$value = _ref.value,\n    value = _ref$value === void 0 ? 0 : _ref$value,\n    max = _ref.max;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    oldValue = _useState2[0],\n    setOldValue = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    newValue = _useState4[0],\n    setNewValue = _useState4[1];\n  var prevValueRef = usePrevious(value);\n  useEffect(function () {\n    if (typeof value === \"string\") {\n      setOldValue(void 0);\n      setNewValue(void 0);\n    } else if (typeof prevValueRef === \"string\") {\n      setOldValue(void 0);\n      setNewValue(value);\n    } else {\n      setOldValue(prevValueRef);\n      setNewValue(value);\n    }\n  }, [value, prevValueRef]);\n  var numbers = useMemo(function () {\n    if (typeof value === \"string\") {\n      return [];\n    }\n    if (value < 1) {\n      return [0];\n    }\n    var result = [];\n    var currentValue = value;\n    if (typeof max === \"number\") {\n      currentValue = Math.min(max, currentValue);\n    }\n    while (currentValue >= 1) {\n      result.push(currentValue % 10);\n      currentValue /= 10;\n      currentValue = Math.floor(currentValue);\n    }\n    result.reverse();\n    return result;\n  }, [value, max]);\n  var _useStyles = useStyles(null, {\n      name: \"machine\"\n    }),\n    classes = _useStyles.classes;\n  return typeof value === \"string\" ? /* @__PURE__ */React.createElement(\"span\", {\n    ref: ref\n  }, value) : /* @__PURE__ */React.createElement(\"span\", {\n    ref: ref,\n    className: classes.base\n  }, numbers.map(function (number, i) {\n    return /* @__PURE__ */React.createElement(MachineNumber, {\n      key: numbers.length - i - 1,\n      value: number,\n      oldOriginalNumber: oldValue,\n      newOriginalNumber: newValue\n    });\n  }), typeof max === \"number\" && value > max && /* @__PURE__ */React.createElement(\"span\", null, \"+\"));\n});\nexport { Machine };","map":null,"metadata":{},"sourceType":"module"}