{"ast":null,"code":"'use strict';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar format = require('./format');\nfunction fillExcept(info, fillExceptKeys, metadataKey) {\n  var savedKeys = fillExceptKeys.reduce(function (acc, key) {\n    acc[key] = info[key];\n    delete info[key];\n    return acc;\n  }, {});\n  var metadata = Object.keys(info).reduce(function (acc, key) {\n    acc[key] = info[key];\n    delete info[key];\n    return acc;\n  }, {});\n  Object.assign(info, savedKeys, _defineProperty({}, metadataKey, metadata));\n  return info;\n}\nfunction fillWith(info, fillWithKeys, metadataKey) {\n  info[metadataKey] = fillWithKeys.reduce(function (acc, key) {\n    acc[key] = info[key];\n    delete info[key];\n    return acc;\n  }, {});\n  return info;\n}\n/**\n * Adds in a \"metadata\" object to collect extraneous data, similar to the metadata\n * object in winston 2.x.\n */\n\nmodule.exports = format(function (info) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadataKey = 'metadata';\n  if (opts.key) {\n    metadataKey = opts.key;\n  }\n  var fillExceptKeys = [];\n  if (!opts.fillExcept && !opts.fillWith) {\n    fillExceptKeys.push('level');\n    fillExceptKeys.push('message');\n  }\n  if (opts.fillExcept) {\n    fillExceptKeys = opts.fillExcept;\n  }\n  if (fillExceptKeys.length > 0) {\n    return fillExcept(info, fillExceptKeys, metadataKey);\n  }\n  if (opts.fillWith) {\n    return fillWith(info, opts.fillWith, metadataKey);\n  }\n  return info;\n});","map":null,"metadata":{},"sourceType":"script"}