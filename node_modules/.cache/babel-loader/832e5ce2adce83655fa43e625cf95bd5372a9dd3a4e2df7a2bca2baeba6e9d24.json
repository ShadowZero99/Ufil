{"ast":null,"code":"/* eslint-disable complexity,max-statements */\n\n/**\n * file.js: Transport for outputting to a local log file.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nvar fs = require('fs');\nvar path = require('path');\nvar asyncSeries = require('async/series');\nvar zlib = require('zlib');\nvar _require = require('triple-beam'),\n  MESSAGE = _require.MESSAGE;\nvar _require2 = require('readable-stream'),\n  Stream = _require2.Stream,\n  PassThrough = _require2.PassThrough;\nvar TransportStream = require('winston-transport');\nvar debug = require('diagnostics')('winston:file');\nvar os = require('os');\nvar tailFile = require('../tail-file');\n/**\n * Transport for outputting to a local log file.\n * @type {File}\n * @extends {TransportStream}\n */\n\nmodule.exports = /*#__PURE__*/\nfunction (_TransportStream) {\n  _inherits(File, _TransportStream);\n\n  /**\n   * Constructor function for the File transport object responsible for\n   * persisting log messages and metadata to one or more files.\n   * @param {Object} options - Options for this instance.\n   */\n  function File() {\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, File);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(File).call(this, options)); // Expose the name of this Transport on the prototype.\n\n    _this.name = options.name || 'file'; // Helper function which throws an `Error` in the event that any of the\n    // rest of the arguments is present in `options`.\n\n    function throwIf(target) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      args.slice(1).forEach(function (name) {\n        if (options[name]) {\n          throw new Error(\"Cannot set \".concat(name, \" and \").concat(target, \" together\"));\n        }\n      });\n    } // Setup the base stream that always gets piped to to handle buffering.\n\n    _this._stream = new PassThrough();\n    _this._stream.setMaxListeners(30); // Bind this context for listener methods.\n\n    _this._onError = _this._onError.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    if (options.filename || options.dirname) {\n      throwIf('filename or dirname', 'stream');\n      _this._basename = _this.filename = options.filename ? path.basename(options.filename) : 'winston.log';\n      _this.dirname = options.dirname || path.dirname(options.filename);\n      _this.options = options.options || {\n        flags: 'a'\n      };\n    } else if (options.stream) {\n      // eslint-disable-next-line no-console\n      console.warn('options.stream will be removed in winston@4. Use winston.transports.Stream');\n      throwIf('stream', 'filename', 'maxsize');\n      _this._dest = _this._stream.pipe(_this._setupStream(options.stream));\n      _this.dirname = path.dirname(_this._dest.path); // We need to listen for drain events when write() returns false. This\n      // can make node mad at times.\n    } else {\n      throw new Error('Cannot log to file without filename or stream.');\n    }\n    _this.maxsize = options.maxsize || null;\n    _this.rotationFormat = options.rotationFormat || false;\n    _this.zippedArchive = options.zippedArchive || false;\n    _this.maxFiles = options.maxFiles || null;\n    _this.eol = options.eol || os.EOL;\n    _this.tailable = options.tailable || false; // Internal state variables representing the number of files this instance\n    // has created and the current size (in bytes) of the current logfile.\n\n    _this._size = 0;\n    _this._pendingSize = 0;\n    _this._created = 0;\n    _this._drain = false;\n    _this._opening = false;\n    _this._ending = false;\n    if (_this.dirname) _this._createLogDirIfNotExist(_this.dirname);\n    _this.open();\n    return _this;\n  }\n  _createClass(File, [{\n    key: \"finishIfEnding\",\n    value: function finishIfEnding() {\n      var _this2 = this;\n      if (this._ending) {\n        if (this._opening) {\n          this.once('open', function () {\n            _this2._stream.once('finish', function () {\n              return _this2.emit('finish');\n            });\n            setImmediate(function () {\n              return _this2._stream.end();\n            });\n          });\n        } else {\n          this._stream.once('finish', function () {\n            return _this2.emit('finish');\n          });\n          setImmediate(function () {\n            return _this2._stream.end();\n          });\n        }\n      }\n    }\n    /**\n     * Core logging method exposed to Winston. Metadata is optional.\n     * @param {Object} info - TODO: add param description.\n     * @param {Function} callback - TODO: add param description.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"log\",\n    value: function log(info) {\n      var _this3 = this;\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n\n      // Remark: (jcrugzz) What is necessary about this callback(null, true) now\n      // when thinking about 3.x? Should silent be handled in the base\n      // TransportStream _write method?\n      if (this.silent) {\n        callback();\n        return true;\n      } // Output stream buffer is full and has asked us to wait for the drain event\n\n      if (this._drain) {\n        this._stream.once('drain', function () {\n          _this3._drain = false;\n          _this3.log(info, callback);\n        });\n        return;\n      }\n      if (this._rotate) {\n        this._stream.once('rotate', function () {\n          _this3._rotate = false;\n          _this3.log(info, callback);\n        });\n        return;\n      } // Grab the raw string and append the expected EOL.\n\n      var output = \"\".concat(info[MESSAGE]).concat(this.eol);\n      var bytes = Buffer.byteLength(output); // After we have written to the PassThrough check to see if we need\n      // to rotate to the next file.\n      //\n      // Remark: This gets called too early and does not depict when data\n      // has been actually flushed to disk.\n\n      function logged() {\n        var _this4 = this;\n        this._size += bytes;\n        this._pendingSize -= bytes;\n        debug('logged %s %s', this._size, output);\n        this.emit('logged', info); // Do not attempt to rotate files while opening\n\n        if (this._opening) {\n          return;\n        } // Check to see if we need to end the stream and create a new one.\n\n        if (!this._needsNewFile()) {\n          return;\n        } // End the current stream, ensure it flushes and create a new one.\n        // This could potentially be optimized to not run a stat call but its\n        // the safest way since we are supporting `maxFiles`.\n\n        this._rotate = true;\n        this._endStream(function () {\n          return _this4._rotateFile();\n        });\n      } // Keep track of the pending bytes being written while files are opening\n      // in order to properly rotate the PassThrough this._stream when the file\n      // eventually does open.\n\n      this._pendingSize += bytes;\n      if (this._opening && !this.rotatedWhileOpening && this._needsNewFile(this._size + this._pendingSize)) {\n        this.rotatedWhileOpening = true;\n      }\n      var written = this._stream.write(output, logged.bind(this));\n      if (!written) {\n        this._drain = true;\n        this._stream.once('drain', function () {\n          _this3._drain = false;\n          callback();\n        });\n      } else {\n        callback(); // eslint-disable-line callback-return\n      }\n\n      debug('written', written, this._drain);\n      this.finishIfEnding();\n      return written;\n    }\n    /**\n     * Query the transport. Options object is optional.\n     * @param {Object} options - Loggly-like query options for this instance.\n     * @param {function} callback - Continuation to respond to when complete.\n     * TODO: Refactor me.\n     */\n  }, {\n    key: \"query\",\n    value: function query(options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options = normalizeQuery(options);\n      var file = path.join(this.dirname, this.filename);\n      var buff = '';\n      var results = [];\n      var row = 0;\n      var stream = fs.createReadStream(file, {\n        encoding: 'utf8'\n      });\n      stream.on('error', function (err) {\n        if (stream.readable) {\n          stream.destroy();\n        }\n        if (!callback) {\n          return;\n        }\n        return err.code !== 'ENOENT' ? callback(err) : callback(null, results);\n      });\n      stream.on('data', function (data) {\n        data = (buff + data).split(/\\n+/);\n        var l = data.length - 1;\n        var i = 0;\n        for (; i < l; i++) {\n          if (!options.start || row >= options.start) {\n            add(data[i]);\n          }\n          row++;\n        }\n        buff = data[l];\n      });\n      stream.on('close', function () {\n        if (buff) {\n          add(buff, true);\n        }\n        if (options.order === 'desc') {\n          results = results.reverse();\n        } // eslint-disable-next-line callback-return\n\n        if (callback) callback(null, results);\n      });\n      function add(buff, attempt) {\n        try {\n          var log = JSON.parse(buff);\n          if (check(log)) {\n            push(log);\n          }\n        } catch (e) {\n          if (!attempt) {\n            stream.emit('error', e);\n          }\n        }\n      }\n      function push(log) {\n        if (options.rows && results.length >= options.rows && options.order !== 'desc') {\n          if (stream.readable) {\n            stream.destroy();\n          }\n          return;\n        }\n        if (options.fields) {\n          log = options.fields.reduce(function (obj, key) {\n            obj[key] = log[key];\n            return obj;\n          }, {});\n        }\n        if (options.order === 'desc') {\n          if (results.length >= options.rows) {\n            results.shift();\n          }\n        }\n        results.push(log);\n      }\n      function check(log) {\n        if (!log) {\n          return;\n        }\n        if (_typeof(log) !== 'object') {\n          return;\n        }\n        var time = new Date(log.timestamp);\n        if (options.from && time < options.from || options.until && time > options.until || options.level && options.level !== log.level) {\n          return;\n        }\n        return true;\n      }\n      function normalizeQuery(options) {\n        options = options || {}; // limit\n\n        options.rows = options.rows || options.limit || 10; // starting row offset\n\n        options.start = options.start || 0; // now\n\n        options.until = options.until || new Date();\n        if (_typeof(options.until) !== 'object') {\n          options.until = new Date(options.until);\n        } // now - 24\n\n        options.from = options.from || options.until - 24 * 60 * 60 * 1000;\n        if (_typeof(options.from) !== 'object') {\n          options.from = new Date(options.from);\n        } // 'asc' or 'desc'\n\n        options.order = options.order || 'desc'; // which fields to select\n\n        options.fields = options.fields;\n        return options;\n      }\n    }\n    /**\n     * Returns a log stream for this transport. Options object is optional.\n     * @param {Object} options - Stream options for this instance.\n     * @returns {Stream} - TODO: add return description.\n     * TODO: Refactor me.\n     */\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var file = path.join(this.dirname, this.filename);\n      var stream = new Stream();\n      var tail = {\n        file: file,\n        start: options.start\n      };\n      stream.destroy = tailFile(tail, function (err, line) {\n        if (err) {\n          return stream.emit('error', err);\n        }\n        try {\n          stream.emit('data', line);\n          line = JSON.parse(line);\n          stream.emit('log', line);\n        } catch (e) {\n          stream.emit('error', e);\n        }\n      });\n      return stream;\n    }\n    /**\n     * Checks to see the filesize of.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this5 = this;\n\n      // If we do not have a filename then we were passed a stream and\n      // don't need to keep track of size.\n      if (!this.filename) return;\n      if (this._opening) return;\n      this._opening = true; // Stat the target file to get the size and create the stream.\n\n      this.stat(function (err, size) {\n        if (err) {\n          return _this5.emit('error', err);\n        }\n        debug('stat done: %s { size: %s }', _this5.filename, size);\n        _this5._size = size;\n        _this5._dest = _this5._createStream(_this5._stream);\n        _this5._opening = false;\n        _this5.once('open', function () {\n          if (_this5._stream.eventNames().includes('rotate')) {\n            _this5._stream.emit('rotate');\n          } else {\n            _this5._rotate = false;\n          }\n        });\n      });\n    }\n    /**\n     * Stat the file and assess information in order to create the proper stream.\n     * @param {function} callback - TODO: add param description.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"stat\",\n    value: function stat(callback) {\n      var _this6 = this;\n      var target = this._getFile();\n      var fullpath = path.join(this.dirname, target);\n      fs.stat(fullpath, function (err, stat) {\n        if (err && err.code === 'ENOENT') {\n          debug('ENOENT ok', fullpath); // Update internally tracked filename with the new target name.\n\n          _this6.filename = target;\n          return callback(null, 0);\n        }\n        if (err) {\n          debug(\"err \".concat(err.code, \" \").concat(fullpath));\n          return callback(err);\n        }\n        if (!stat || _this6._needsNewFile(stat.size)) {\n          // If `stats.size` is greater than the `maxsize` for this\n          // instance then try again.\n          return _this6._incFile(function () {\n            return _this6.stat(callback);\n          });\n        } // Once we have figured out what the filename is, set it\n        // and return the size.\n\n        _this6.filename = target;\n        callback(null, stat.size);\n      });\n    }\n    /**\n     * Closes the stream associated with this instance.\n     * @param {function} cb - TODO: add param description.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(cb) {\n      var _this7 = this;\n      if (!this._stream) {\n        return;\n      }\n      this._stream.end(function () {\n        if (cb) {\n          cb(); // eslint-disable-line callback-return\n        }\n\n        _this7.emit('flush');\n        _this7.emit('closed');\n      });\n    }\n    /**\n     * TODO: add method description.\n     * @param {number} size - TODO: add param description.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"_needsNewFile\",\n    value: function _needsNewFile(size) {\n      size = size || this._size;\n      return this.maxsize && size >= this.maxsize;\n    }\n    /**\n     * TODO: add method description.\n     * @param {Error} err - TODO: add param description.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"_onError\",\n    value: function _onError(err) {\n      this.emit('error', err);\n    }\n    /**\n     * TODO: add method description.\n     * @param {Stream} stream - TODO: add param description.\n     * @returns {mixed} - TODO: add return description.\n     */\n  }, {\n    key: \"_setupStream\",\n    value: function _setupStream(stream) {\n      stream.on('error', this._onError);\n      return stream;\n    }\n    /**\n     * TODO: add method description.\n     * @param {Stream} stream - TODO: add param description.\n     * @returns {mixed} - TODO: add return description.\n     */\n  }, {\n    key: \"_cleanupStream\",\n    value: function _cleanupStream(stream) {\n      stream.removeListener('error', this._onError);\n      return stream;\n    }\n    /**\n     * TODO: add method description.\n     */\n  }, {\n    key: \"_rotateFile\",\n    value: function _rotateFile() {\n      var _this8 = this;\n      this._incFile(function () {\n        return _this8.open();\n      });\n    }\n    /**\n     * Unpipe from the stream that has been marked as full and end it so it\n     * flushes to disk.\n     *\n     * @param {function} callback - Callback for when the current file has closed.\n     * @private\n     */\n  }, {\n    key: \"_endStream\",\n    value: function _endStream() {\n      var _this9 = this;\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n      if (this._dest) {\n        this._stream.unpipe(this._dest);\n        this._dest.end(function () {\n          _this9._cleanupStream(_this9._dest);\n          callback();\n        });\n      } else {\n        callback(); // eslint-disable-line callback-return\n      }\n    }\n    /**\n     * Returns the WritableStream for the active file on this instance. If we\n     * should gzip the file then a zlib stream is returned.\n     *\n     * @param {ReadableStream} source – PassThrough to pipe to the file when open.\n     * @returns {WritableStream} Stream that writes to disk for the active file.\n     */\n  }, {\n    key: \"_createStream\",\n    value: function _createStream(source) {\n      var _this10 = this;\n      var fullpath = path.join(this.dirname, this.filename);\n      debug('create stream start', fullpath, this.options);\n      var dest = fs.createWriteStream(fullpath, this.options) // TODO: What should we do with errors here?\n      .on('error', function (err) {\n        return debug(err);\n      }).on('close', function () {\n        return debug('close', dest.path, dest.bytesWritten);\n      }).on('open', function () {\n        debug('file open ok', fullpath);\n        _this10.emit('open', fullpath);\n        source.pipe(dest); // If rotation occured during the open operation then we immediately\n        // start writing to a new PassThrough, begin opening the next file\n        // and cleanup the previous source and dest once the source has drained.\n\n        if (_this10.rotatedWhileOpening) {\n          _this10._stream = new PassThrough();\n          _this10._stream.setMaxListeners(30);\n          _this10._rotateFile();\n          _this10.rotatedWhileOpening = false;\n          _this10._cleanupStream(dest);\n          source.end();\n        }\n      });\n      debug('create stream ok', fullpath);\n      if (this.zippedArchive) {\n        var gzip = zlib.createGzip();\n        gzip.pipe(dest);\n        return gzip;\n      }\n      return dest;\n    }\n    /**\n     * TODO: add method description.\n     * @param {function} callback - TODO: add param description.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"_incFile\",\n    value: function _incFile(callback) {\n      debug('_incFile', this.filename);\n      var ext = path.extname(this._basename);\n      var basename = path.basename(this._basename, ext);\n      if (!this.tailable) {\n        this._created += 1;\n        this._checkMaxFilesIncrementing(ext, basename, callback);\n      } else {\n        this._checkMaxFilesTailable(ext, basename, callback);\n      }\n    }\n    /**\n     * Gets the next filename to use for this instance in the case that log\n     * filesizes are being capped.\n     * @returns {string} - TODO: add return description.\n     * @private\n     */\n  }, {\n    key: \"_getFile\",\n    value: function _getFile() {\n      var ext = path.extname(this._basename);\n      var basename = path.basename(this._basename, ext);\n      var isRotation = this.rotationFormat ? this.rotationFormat() : this._created; // Caveat emptor (indexzero): rotationFormat() was broken by design When\n      // combined with max files because the set of files to unlink is never\n      // stored.\n\n      var target = !this.tailable && this._created ? \"\".concat(basename).concat(isRotation).concat(ext) : \"\".concat(basename).concat(ext);\n      return this.zippedArchive && !this.tailable ? \"\".concat(target, \".gz\") : target;\n    }\n    /**\n     * Increment the number of files created or checked by this instance.\n     * @param {mixed} ext - TODO: add param description.\n     * @param {mixed} basename - TODO: add param description.\n     * @param {mixed} callback - TODO: add param description.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_checkMaxFilesIncrementing\",\n    value: function _checkMaxFilesIncrementing(ext, basename, callback) {\n      // Check for maxFiles option and delete file.\n      if (!this.maxFiles || this._created < this.maxFiles) {\n        return setImmediate(callback);\n      }\n      var oldest = this._created - this.maxFiles;\n      var isOldest = oldest !== 0 ? oldest : '';\n      var isZipped = this.zippedArchive ? '.gz' : '';\n      var filePath = \"\".concat(basename).concat(isOldest).concat(ext).concat(isZipped);\n      var target = path.join(this.dirname, filePath);\n      fs.unlink(target, callback);\n    }\n    /**\n     * Roll files forward based on integer, up to maxFiles. e.g. if base if\n     * file.log and it becomes oversized, roll to file1.log, and allow file.log\n     * to be re-used. If file is oversized again, roll file1.log to file2.log,\n     * roll file.log to file1.log, and so on.\n     * @param {mixed} ext - TODO: add param description.\n     * @param {mixed} basename - TODO: add param description.\n     * @param {mixed} callback - TODO: add param description.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_checkMaxFilesTailable\",\n    value: function _checkMaxFilesTailable(ext, basename, callback) {\n      var _this12 = this;\n      var tasks = [];\n      if (!this.maxFiles) {\n        return;\n      } // const isZipped = this.zippedArchive ? '.gz' : '';\n\n      var isZipped = this.zippedArchive ? '.gz' : '';\n      for (var x = this.maxFiles - 1; x > 1; x--) {\n        tasks.push(function (i, cb) {\n          var _this11 = this;\n          var fileName = \"\".concat(basename).concat(i - 1).concat(ext).concat(isZipped);\n          var tmppath = path.join(this.dirname, fileName);\n          fs.exists(tmppath, function (exists) {\n            if (!exists) {\n              return cb(null);\n            }\n            fileName = \"\".concat(basename).concat(i).concat(ext).concat(isZipped);\n            fs.rename(tmppath, path.join(_this11.dirname, fileName), cb);\n          });\n        }.bind(this, x));\n      }\n      asyncSeries(tasks, function () {\n        fs.rename(path.join(_this12.dirname, \"\".concat(basename).concat(ext)), path.join(_this12.dirname, \"\".concat(basename, \"1\").concat(ext).concat(isZipped)), callback);\n      });\n    }\n  }, {\n    key: \"_createLogDirIfNotExist\",\n    value: function _createLogDirIfNotExist(dirPath) {\n      /* eslint-disable no-sync */\n      if (!fs.existsSync(dirPath)) {\n        fs.mkdirSync(dirPath, {\n          recursive: true\n        });\n      }\n      /* eslint-enable no-sync */\n    }\n  }]);\n\n  return File;\n}(TransportStream);","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","call","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","value","_setPrototypeOf","p","ReferenceError","fs","require","path","asyncSeries","zlib","_require","MESSAGE","_require2","Stream","PassThrough","TransportStream","debug","os","tailFile","module","exports","_TransportStream","File","_this","options","arguments","undefined","name","throwIf","_len","args","Array","_key","slice","forEach","Error","concat","_stream","setMaxListeners","_onError","bind","filename","dirname","_basename","basename","flags","stream","console","warn","_dest","pipe","_setupStream","maxsize","rotationFormat","zippedArchive","maxFiles","eol","EOL","tailable","_size","_pendingSize","_created","_drain","_opening","_ending","_createLogDirIfNotExist","open","finishIfEnding","_this2","once","emit","setImmediate","end","log","info","_this3","callback","silent","_rotate","output","bytes","Buffer","byteLength","logged","_this4","_needsNewFile","_endStream","_rotateFile","rotatedWhileOpening","written","write","query","normalizeQuery","file","join","buff","results","row","createReadStream","encoding","on","err","readable","destroy","code","data","split","l","start","add","order","reverse","attempt","JSON","parse","check","push","e","rows","fields","reduce","shift","time","Date","timestamp","from","until","level","limit","tail","line","_this5","stat","size","_createStream","eventNames","includes","_this6","_getFile","fullpath","_incFile","close","cb","_this7","_cleanupStream","removeListener","_this8","_this9","unpipe","source","_this10","dest","createWriteStream","bytesWritten","gzip","createGzip","ext","extname","_checkMaxFilesIncrementing","_checkMaxFilesTailable","isRotation","oldest","isOldest","isZipped","filePath","unlink","_this12","tasks","x","_this11","fileName","tmppath","exists","rename","dirPath","existsSync","mkdirSync","recursive"],"sources":["C:/Users/PC/node_modules/firebase-tools/node_modules/winston/dist/winston/transports/file.js"],"sourcesContent":["/* eslint-disable complexity,max-statements */\n\n/**\n * file.js: Transport for outputting to a local log file.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar asyncSeries = require('async/series');\n\nvar zlib = require('zlib');\n\nvar _require = require('triple-beam'),\n    MESSAGE = _require.MESSAGE;\n\nvar _require2 = require('readable-stream'),\n    Stream = _require2.Stream,\n    PassThrough = _require2.PassThrough;\n\nvar TransportStream = require('winston-transport');\n\nvar debug = require('diagnostics')('winston:file');\n\nvar os = require('os');\n\nvar tailFile = require('../tail-file');\n/**\n * Transport for outputting to a local log file.\n * @type {File}\n * @extends {TransportStream}\n */\n\n\nmodule.exports =\n/*#__PURE__*/\nfunction (_TransportStream) {\n  _inherits(File, _TransportStream);\n\n  /**\n   * Constructor function for the File transport object responsible for\n   * persisting log messages and metadata to one or more files.\n   * @param {Object} options - Options for this instance.\n   */\n  function File() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, File);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(File).call(this, options)); // Expose the name of this Transport on the prototype.\n\n    _this.name = options.name || 'file'; // Helper function which throws an `Error` in the event that any of the\n    // rest of the arguments is present in `options`.\n\n    function throwIf(target) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      args.slice(1).forEach(function (name) {\n        if (options[name]) {\n          throw new Error(\"Cannot set \".concat(name, \" and \").concat(target, \" together\"));\n        }\n      });\n    } // Setup the base stream that always gets piped to to handle buffering.\n\n\n    _this._stream = new PassThrough();\n\n    _this._stream.setMaxListeners(30); // Bind this context for listener methods.\n\n\n    _this._onError = _this._onError.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    if (options.filename || options.dirname) {\n      throwIf('filename or dirname', 'stream');\n      _this._basename = _this.filename = options.filename ? path.basename(options.filename) : 'winston.log';\n      _this.dirname = options.dirname || path.dirname(options.filename);\n      _this.options = options.options || {\n        flags: 'a'\n      };\n    } else if (options.stream) {\n      // eslint-disable-next-line no-console\n      console.warn('options.stream will be removed in winston@4. Use winston.transports.Stream');\n      throwIf('stream', 'filename', 'maxsize');\n      _this._dest = _this._stream.pipe(_this._setupStream(options.stream));\n      _this.dirname = path.dirname(_this._dest.path); // We need to listen for drain events when write() returns false. This\n      // can make node mad at times.\n    } else {\n      throw new Error('Cannot log to file without filename or stream.');\n    }\n\n    _this.maxsize = options.maxsize || null;\n    _this.rotationFormat = options.rotationFormat || false;\n    _this.zippedArchive = options.zippedArchive || false;\n    _this.maxFiles = options.maxFiles || null;\n    _this.eol = options.eol || os.EOL;\n    _this.tailable = options.tailable || false; // Internal state variables representing the number of files this instance\n    // has created and the current size (in bytes) of the current logfile.\n\n    _this._size = 0;\n    _this._pendingSize = 0;\n    _this._created = 0;\n    _this._drain = false;\n    _this._opening = false;\n    _this._ending = false;\n    if (_this.dirname) _this._createLogDirIfNotExist(_this.dirname);\n\n    _this.open();\n\n    return _this;\n  }\n\n  _createClass(File, [{\n    key: \"finishIfEnding\",\n    value: function finishIfEnding() {\n      var _this2 = this;\n\n      if (this._ending) {\n        if (this._opening) {\n          this.once('open', function () {\n            _this2._stream.once('finish', function () {\n              return _this2.emit('finish');\n            });\n\n            setImmediate(function () {\n              return _this2._stream.end();\n            });\n          });\n        } else {\n          this._stream.once('finish', function () {\n            return _this2.emit('finish');\n          });\n\n          setImmediate(function () {\n            return _this2._stream.end();\n          });\n        }\n      }\n    }\n    /**\n     * Core logging method exposed to Winston. Metadata is optional.\n     * @param {Object} info - TODO: add param description.\n     * @param {Function} callback - TODO: add param description.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"log\",\n    value: function log(info) {\n      var _this3 = this;\n\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n\n      // Remark: (jcrugzz) What is necessary about this callback(null, true) now\n      // when thinking about 3.x? Should silent be handled in the base\n      // TransportStream _write method?\n      if (this.silent) {\n        callback();\n        return true;\n      } // Output stream buffer is full and has asked us to wait for the drain event\n\n\n      if (this._drain) {\n        this._stream.once('drain', function () {\n          _this3._drain = false;\n\n          _this3.log(info, callback);\n        });\n\n        return;\n      }\n\n      if (this._rotate) {\n        this._stream.once('rotate', function () {\n          _this3._rotate = false;\n\n          _this3.log(info, callback);\n        });\n\n        return;\n      } // Grab the raw string and append the expected EOL.\n\n\n      var output = \"\".concat(info[MESSAGE]).concat(this.eol);\n      var bytes = Buffer.byteLength(output); // After we have written to the PassThrough check to see if we need\n      // to rotate to the next file.\n      //\n      // Remark: This gets called too early and does not depict when data\n      // has been actually flushed to disk.\n\n      function logged() {\n        var _this4 = this;\n\n        this._size += bytes;\n        this._pendingSize -= bytes;\n        debug('logged %s %s', this._size, output);\n        this.emit('logged', info); // Do not attempt to rotate files while opening\n\n        if (this._opening) {\n          return;\n        } // Check to see if we need to end the stream and create a new one.\n\n\n        if (!this._needsNewFile()) {\n          return;\n        } // End the current stream, ensure it flushes and create a new one.\n        // This could potentially be optimized to not run a stat call but its\n        // the safest way since we are supporting `maxFiles`.\n\n\n        this._rotate = true;\n\n        this._endStream(function () {\n          return _this4._rotateFile();\n        });\n      } // Keep track of the pending bytes being written while files are opening\n      // in order to properly rotate the PassThrough this._stream when the file\n      // eventually does open.\n\n\n      this._pendingSize += bytes;\n\n      if (this._opening && !this.rotatedWhileOpening && this._needsNewFile(this._size + this._pendingSize)) {\n        this.rotatedWhileOpening = true;\n      }\n\n      var written = this._stream.write(output, logged.bind(this));\n\n      if (!written) {\n        this._drain = true;\n\n        this._stream.once('drain', function () {\n          _this3._drain = false;\n          callback();\n        });\n      } else {\n        callback(); // eslint-disable-line callback-return\n      }\n\n      debug('written', written, this._drain);\n      this.finishIfEnding();\n      return written;\n    }\n    /**\n     * Query the transport. Options object is optional.\n     * @param {Object} options - Loggly-like query options for this instance.\n     * @param {function} callback - Continuation to respond to when complete.\n     * TODO: Refactor me.\n     */\n\n  }, {\n    key: \"query\",\n    value: function query(options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = normalizeQuery(options);\n      var file = path.join(this.dirname, this.filename);\n      var buff = '';\n      var results = [];\n      var row = 0;\n      var stream = fs.createReadStream(file, {\n        encoding: 'utf8'\n      });\n      stream.on('error', function (err) {\n        if (stream.readable) {\n          stream.destroy();\n        }\n\n        if (!callback) {\n          return;\n        }\n\n        return err.code !== 'ENOENT' ? callback(err) : callback(null, results);\n      });\n      stream.on('data', function (data) {\n        data = (buff + data).split(/\\n+/);\n        var l = data.length - 1;\n        var i = 0;\n\n        for (; i < l; i++) {\n          if (!options.start || row >= options.start) {\n            add(data[i]);\n          }\n\n          row++;\n        }\n\n        buff = data[l];\n      });\n      stream.on('close', function () {\n        if (buff) {\n          add(buff, true);\n        }\n\n        if (options.order === 'desc') {\n          results = results.reverse();\n        } // eslint-disable-next-line callback-return\n\n\n        if (callback) callback(null, results);\n      });\n\n      function add(buff, attempt) {\n        try {\n          var log = JSON.parse(buff);\n\n          if (check(log)) {\n            push(log);\n          }\n        } catch (e) {\n          if (!attempt) {\n            stream.emit('error', e);\n          }\n        }\n      }\n\n      function push(log) {\n        if (options.rows && results.length >= options.rows && options.order !== 'desc') {\n          if (stream.readable) {\n            stream.destroy();\n          }\n\n          return;\n        }\n\n        if (options.fields) {\n          log = options.fields.reduce(function (obj, key) {\n            obj[key] = log[key];\n            return obj;\n          }, {});\n        }\n\n        if (options.order === 'desc') {\n          if (results.length >= options.rows) {\n            results.shift();\n          }\n        }\n\n        results.push(log);\n      }\n\n      function check(log) {\n        if (!log) {\n          return;\n        }\n\n        if (_typeof(log) !== 'object') {\n          return;\n        }\n\n        var time = new Date(log.timestamp);\n\n        if (options.from && time < options.from || options.until && time > options.until || options.level && options.level !== log.level) {\n          return;\n        }\n\n        return true;\n      }\n\n      function normalizeQuery(options) {\n        options = options || {}; // limit\n\n        options.rows = options.rows || options.limit || 10; // starting row offset\n\n        options.start = options.start || 0; // now\n\n        options.until = options.until || new Date();\n\n        if (_typeof(options.until) !== 'object') {\n          options.until = new Date(options.until);\n        } // now - 24\n\n\n        options.from = options.from || options.until - 24 * 60 * 60 * 1000;\n\n        if (_typeof(options.from) !== 'object') {\n          options.from = new Date(options.from);\n        } // 'asc' or 'desc'\n\n\n        options.order = options.order || 'desc'; // which fields to select\n\n        options.fields = options.fields;\n        return options;\n      }\n    }\n    /**\n     * Returns a log stream for this transport. Options object is optional.\n     * @param {Object} options - Stream options for this instance.\n     * @returns {Stream} - TODO: add return description.\n     * TODO: Refactor me.\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var file = path.join(this.dirname, this.filename);\n      var stream = new Stream();\n      var tail = {\n        file: file,\n        start: options.start\n      };\n      stream.destroy = tailFile(tail, function (err, line) {\n        if (err) {\n          return stream.emit('error', err);\n        }\n\n        try {\n          stream.emit('data', line);\n          line = JSON.parse(line);\n          stream.emit('log', line);\n        } catch (e) {\n          stream.emit('error', e);\n        }\n      });\n      return stream;\n    }\n    /**\n     * Checks to see the filesize of.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this5 = this;\n\n      // If we do not have a filename then we were passed a stream and\n      // don't need to keep track of size.\n      if (!this.filename) return;\n      if (this._opening) return;\n      this._opening = true; // Stat the target file to get the size and create the stream.\n\n      this.stat(function (err, size) {\n        if (err) {\n          return _this5.emit('error', err);\n        }\n\n        debug('stat done: %s { size: %s }', _this5.filename, size);\n        _this5._size = size;\n        _this5._dest = _this5._createStream(_this5._stream);\n        _this5._opening = false;\n\n        _this5.once('open', function () {\n          if (_this5._stream.eventNames().includes('rotate')) {\n            _this5._stream.emit('rotate');\n          } else {\n            _this5._rotate = false;\n          }\n        });\n      });\n    }\n    /**\n     * Stat the file and assess information in order to create the proper stream.\n     * @param {function} callback - TODO: add param description.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"stat\",\n    value: function stat(callback) {\n      var _this6 = this;\n\n      var target = this._getFile();\n\n      var fullpath = path.join(this.dirname, target);\n      fs.stat(fullpath, function (err, stat) {\n        if (err && err.code === 'ENOENT') {\n          debug('ENOENT ok', fullpath); // Update internally tracked filename with the new target name.\n\n          _this6.filename = target;\n          return callback(null, 0);\n        }\n\n        if (err) {\n          debug(\"err \".concat(err.code, \" \").concat(fullpath));\n          return callback(err);\n        }\n\n        if (!stat || _this6._needsNewFile(stat.size)) {\n          // If `stats.size` is greater than the `maxsize` for this\n          // instance then try again.\n          return _this6._incFile(function () {\n            return _this6.stat(callback);\n          });\n        } // Once we have figured out what the filename is, set it\n        // and return the size.\n\n\n        _this6.filename = target;\n        callback(null, stat.size);\n      });\n    }\n    /**\n     * Closes the stream associated with this instance.\n     * @param {function} cb - TODO: add param description.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(cb) {\n      var _this7 = this;\n\n      if (!this._stream) {\n        return;\n      }\n\n      this._stream.end(function () {\n        if (cb) {\n          cb(); // eslint-disable-line callback-return\n        }\n\n        _this7.emit('flush');\n\n        _this7.emit('closed');\n      });\n    }\n    /**\n     * TODO: add method description.\n     * @param {number} size - TODO: add param description.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"_needsNewFile\",\n    value: function _needsNewFile(size) {\n      size = size || this._size;\n      return this.maxsize && size >= this.maxsize;\n    }\n    /**\n     * TODO: add method description.\n     * @param {Error} err - TODO: add param description.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"_onError\",\n    value: function _onError(err) {\n      this.emit('error', err);\n    }\n    /**\n     * TODO: add method description.\n     * @param {Stream} stream - TODO: add param description.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"_setupStream\",\n    value: function _setupStream(stream) {\n      stream.on('error', this._onError);\n      return stream;\n    }\n    /**\n     * TODO: add method description.\n     * @param {Stream} stream - TODO: add param description.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"_cleanupStream\",\n    value: function _cleanupStream(stream) {\n      stream.removeListener('error', this._onError);\n      return stream;\n    }\n    /**\n     * TODO: add method description.\n     */\n\n  }, {\n    key: \"_rotateFile\",\n    value: function _rotateFile() {\n      var _this8 = this;\n\n      this._incFile(function () {\n        return _this8.open();\n      });\n    }\n    /**\n     * Unpipe from the stream that has been marked as full and end it so it\n     * flushes to disk.\n     *\n     * @param {function} callback - Callback for when the current file has closed.\n     * @private\n     */\n\n  }, {\n    key: \"_endStream\",\n    value: function _endStream() {\n      var _this9 = this;\n\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n\n      if (this._dest) {\n        this._stream.unpipe(this._dest);\n\n        this._dest.end(function () {\n          _this9._cleanupStream(_this9._dest);\n\n          callback();\n        });\n      } else {\n        callback(); // eslint-disable-line callback-return\n      }\n    }\n    /**\n     * Returns the WritableStream for the active file on this instance. If we\n     * should gzip the file then a zlib stream is returned.\n     *\n     * @param {ReadableStream} source – PassThrough to pipe to the file when open.\n     * @returns {WritableStream} Stream that writes to disk for the active file.\n     */\n\n  }, {\n    key: \"_createStream\",\n    value: function _createStream(source) {\n      var _this10 = this;\n\n      var fullpath = path.join(this.dirname, this.filename);\n      debug('create stream start', fullpath, this.options);\n      var dest = fs.createWriteStream(fullpath, this.options) // TODO: What should we do with errors here?\n      .on('error', function (err) {\n        return debug(err);\n      }).on('close', function () {\n        return debug('close', dest.path, dest.bytesWritten);\n      }).on('open', function () {\n        debug('file open ok', fullpath);\n\n        _this10.emit('open', fullpath);\n\n        source.pipe(dest); // If rotation occured during the open operation then we immediately\n        // start writing to a new PassThrough, begin opening the next file\n        // and cleanup the previous source and dest once the source has drained.\n\n        if (_this10.rotatedWhileOpening) {\n          _this10._stream = new PassThrough();\n\n          _this10._stream.setMaxListeners(30);\n\n          _this10._rotateFile();\n\n          _this10.rotatedWhileOpening = false;\n\n          _this10._cleanupStream(dest);\n\n          source.end();\n        }\n      });\n      debug('create stream ok', fullpath);\n\n      if (this.zippedArchive) {\n        var gzip = zlib.createGzip();\n        gzip.pipe(dest);\n        return gzip;\n      }\n\n      return dest;\n    }\n    /**\n     * TODO: add method description.\n     * @param {function} callback - TODO: add param description.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"_incFile\",\n    value: function _incFile(callback) {\n      debug('_incFile', this.filename);\n      var ext = path.extname(this._basename);\n      var basename = path.basename(this._basename, ext);\n\n      if (!this.tailable) {\n        this._created += 1;\n\n        this._checkMaxFilesIncrementing(ext, basename, callback);\n      } else {\n        this._checkMaxFilesTailable(ext, basename, callback);\n      }\n    }\n    /**\n     * Gets the next filename to use for this instance in the case that log\n     * filesizes are being capped.\n     * @returns {string} - TODO: add return description.\n     * @private\n     */\n\n  }, {\n    key: \"_getFile\",\n    value: function _getFile() {\n      var ext = path.extname(this._basename);\n      var basename = path.basename(this._basename, ext);\n      var isRotation = this.rotationFormat ? this.rotationFormat() : this._created; // Caveat emptor (indexzero): rotationFormat() was broken by design When\n      // combined with max files because the set of files to unlink is never\n      // stored.\n\n      var target = !this.tailable && this._created ? \"\".concat(basename).concat(isRotation).concat(ext) : \"\".concat(basename).concat(ext);\n      return this.zippedArchive && !this.tailable ? \"\".concat(target, \".gz\") : target;\n    }\n    /**\n     * Increment the number of files created or checked by this instance.\n     * @param {mixed} ext - TODO: add param description.\n     * @param {mixed} basename - TODO: add param description.\n     * @param {mixed} callback - TODO: add param description.\n     * @returns {undefined}\n     * @private\n     */\n\n  }, {\n    key: \"_checkMaxFilesIncrementing\",\n    value: function _checkMaxFilesIncrementing(ext, basename, callback) {\n      // Check for maxFiles option and delete file.\n      if (!this.maxFiles || this._created < this.maxFiles) {\n        return setImmediate(callback);\n      }\n\n      var oldest = this._created - this.maxFiles;\n      var isOldest = oldest !== 0 ? oldest : '';\n      var isZipped = this.zippedArchive ? '.gz' : '';\n      var filePath = \"\".concat(basename).concat(isOldest).concat(ext).concat(isZipped);\n      var target = path.join(this.dirname, filePath);\n      fs.unlink(target, callback);\n    }\n    /**\n     * Roll files forward based on integer, up to maxFiles. e.g. if base if\n     * file.log and it becomes oversized, roll to file1.log, and allow file.log\n     * to be re-used. If file is oversized again, roll file1.log to file2.log,\n     * roll file.log to file1.log, and so on.\n     * @param {mixed} ext - TODO: add param description.\n     * @param {mixed} basename - TODO: add param description.\n     * @param {mixed} callback - TODO: add param description.\n     * @returns {undefined}\n     * @private\n     */\n\n  }, {\n    key: \"_checkMaxFilesTailable\",\n    value: function _checkMaxFilesTailable(ext, basename, callback) {\n      var _this12 = this;\n\n      var tasks = [];\n\n      if (!this.maxFiles) {\n        return;\n      } // const isZipped = this.zippedArchive ? '.gz' : '';\n\n\n      var isZipped = this.zippedArchive ? '.gz' : '';\n\n      for (var x = this.maxFiles - 1; x > 1; x--) {\n        tasks.push(function (i, cb) {\n          var _this11 = this;\n\n          var fileName = \"\".concat(basename).concat(i - 1).concat(ext).concat(isZipped);\n          var tmppath = path.join(this.dirname, fileName);\n          fs.exists(tmppath, function (exists) {\n            if (!exists) {\n              return cb(null);\n            }\n\n            fileName = \"\".concat(basename).concat(i).concat(ext).concat(isZipped);\n            fs.rename(tmppath, path.join(_this11.dirname, fileName), cb);\n          });\n        }.bind(this, x));\n      }\n\n      asyncSeries(tasks, function () {\n        fs.rename(path.join(_this12.dirname, \"\".concat(basename).concat(ext)), path.join(_this12.dirname, \"\".concat(basename, \"1\").concat(ext).concat(isZipped)), callback);\n      });\n    }\n  }, {\n    key: \"_createLogDirIfNotExist\",\n    value: function _createLogDirIfNotExist(dirPath) {\n      /* eslint-disable no-sync */\n      if (!fs.existsSync(dirPath)) {\n        fs.mkdirSync(dirPath, {\n          recursive: true\n        });\n      }\n      /* eslint-enable no-sync */\n\n    }\n  }]);\n\n  return File;\n}(TransportStream);"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}