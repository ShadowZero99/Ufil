{"ast":null,"code":"'use strict';\n\nvar env = require('env-variable');\n\n/**\n * Checks if a given namespace is allowed by the environment variables.\n *\n * @param {String} name namespace that should be included.\n * @param {Array} variables\n * @returns {Boolean}\n * @api public\n */\nmodule.exports = function enabled(name, variables) {\n  var envy = env(),\n    variable,\n    i = 0;\n  variables = variables || ['diagnostics', 'debug'];\n  for (; i < variables.length; i++) {\n    if (variable = envy[variables[i]]) break;\n  }\n  if (!variable) return false;\n  variables = variable.split(/[\\s,]+/);\n  i = 0;\n  for (; i < variables.length; i++) {\n    variable = variables[i].replace('*', '.*?');\n    if ('-' === variable.charAt(0)) {\n      if (new RegExp('^' + variable.substr(1) + '$').test(name)) {\n        return false;\n      }\n      continue;\n    }\n    if (new RegExp('^' + variable + '$').test(name)) {\n      return true;\n    }\n  }\n  return false;\n};","map":{"version":3,"names":["env","require","module","exports","enabled","name","variables","envy","variable","i","length","split","replace","charAt","RegExp","substr","test"],"sources":["C:/Users/PC/node_modules/firebase-tools/node_modules/enabled/index.js"],"sourcesContent":["'use strict';\n\nvar env = require('env-variable');\n\n/**\n * Checks if a given namespace is allowed by the environment variables.\n *\n * @param {String} name namespace that should be included.\n * @param {Array} variables\n * @returns {Boolean}\n * @api public\n */\nmodule.exports = function enabled(name, variables) {\n  var envy = env()\n    , variable\n    , i = 0;\n\n  variables = variables || ['diagnostics', 'debug'];\n\n  for (; i < variables.length; i++) {\n    if ((variable = envy[variables[i]])) break;\n  }\n\n  if (!variable) return false;\n\n  variables = variable.split(/[\\s,]+/);\n  i = 0;\n\n  for (; i < variables.length; i++) {\n    variable = variables[i].replace('*', '.*?');\n\n    if ('-' === variable.charAt(0)) {\n      if ((new RegExp('^'+ variable.substr(1) +'$')).test(name)) {\n        return false;\n      }\n\n      continue;\n    }\n\n    if ((new RegExp('^'+ variable +'$')).test(name)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,cAAc,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,OAAO,CAACC,IAAI,EAAEC,SAAS,EAAE;EACjD,IAAIC,IAAI,GAAGP,GAAG,EAAE;IACZQ,QAAQ;IACRC,CAAC,GAAG,CAAC;EAETH,SAAS,GAAGA,SAAS,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC;EAEjD,OAAOG,CAAC,GAAGH,SAAS,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAChC,IAAKD,QAAQ,GAAGD,IAAI,CAACD,SAAS,CAACG,CAAC,CAAC,CAAC,EAAG;EACvC;EAEA,IAAI,CAACD,QAAQ,EAAE,OAAO,KAAK;EAE3BF,SAAS,GAAGE,QAAQ,CAACG,KAAK,CAAC,QAAQ,CAAC;EACpCF,CAAC,GAAG,CAAC;EAEL,OAAOA,CAAC,GAAGH,SAAS,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAChCD,QAAQ,GAAGF,SAAS,CAACG,CAAC,CAAC,CAACG,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;IAE3C,IAAI,GAAG,KAAKJ,QAAQ,CAACK,MAAM,CAAC,CAAC,CAAC,EAAE;MAC9B,IAAK,IAAIC,MAAM,CAAC,GAAG,GAAEN,QAAQ,CAACO,MAAM,CAAC,CAAC,CAAC,GAAE,GAAG,CAAC,CAAEC,IAAI,CAACX,IAAI,CAAC,EAAE;QACzD,OAAO,KAAK;MACd;MAEA;IACF;IAEA,IAAK,IAAIS,MAAM,CAAC,GAAG,GAAEN,QAAQ,GAAE,GAAG,CAAC,CAAEQ,IAAI,CAACX,IAAI,CAAC,EAAE;MAC/C,OAAO,IAAI;IACb;EACF;EAEA,OAAO,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}