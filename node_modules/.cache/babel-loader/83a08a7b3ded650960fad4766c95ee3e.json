{"ast":null,"code":"/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar createLogger = require('./create-logger');\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\n\nmodule.exports = /*#__PURE__*/\nfunction () {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  function Container() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Container);\n    this.loggers = new Map();\n    this.options = options;\n  }\n  /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n\n  _createClass(Container, [{\n    key: \"add\",\n    value: function add(id, options) {\n      var _this = this;\n      if (!this.loggers.has(id)) {\n        // Remark: Simple shallow clone for configuration options in case we pass\n        // in instantiated protoypal objects\n        options = Object.assign({}, options || this.options);\n        var existing = options.transports || this.options.transports; // Remark: Make sure if we have an array of transports we slice it to\n        // make copies of those references.\n\n        options.transports = existing ? existing.slice() : [];\n        var logger = createLogger(options);\n        logger.on('close', function () {\n          return _this._delete(id);\n        });\n        this.loggers.set(id, logger);\n      }\n      return this.loggers.get(id);\n    }\n    /**\n     * Retreives a `winston.Logger` instance for the specified `id`. If\n     * an instance does not exist, one is created.\n     * @param {!string} id - The id of the Logger to get.\n     * @param {?Object} [options] - Options for the Logger instance.\n     * @returns {Logger} - A configured Logger instance with a specified id.\n     */\n  }, {\n    key: \"get\",\n    value: function get(id, options) {\n      return this.add(id, options);\n    }\n    /**\n     * Check if the container has a logger with the id.\n     * @param {?string} id - The id of the Logger instance to find.\n     * @returns {boolean} - Boolean value indicating if this instance has a\n     * logger with the specified `id`.\n     */\n  }, {\n    key: \"has\",\n    value: function has(id) {\n      return !!this.loggers.has(id);\n    }\n    /**\n     * Closes a `Logger` instance with the specified `id` if it exists.\n     * If no `id` is supplied then all Loggers are closed.\n     * @param {?string} id - The id of the Logger instance to close.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(id) {\n      var _this2 = this;\n      if (id) {\n        return this._removeLogger(id);\n      }\n      this.loggers.forEach(function (val, key) {\n        return _this2._removeLogger(key);\n      });\n    }\n    /**\n     * Remove a logger based on the id.\n     * @param {!string} id - The id of the logger to remove.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_removeLogger\",\n    value: function _removeLogger(id) {\n      if (!this.loggers.has(id)) {\n        return;\n      }\n      var logger = this.loggers.get(id);\n      logger.close();\n      this._delete(id);\n    }\n    /**\n     * Deletes a `Logger` instance with the specified `id`.\n     * @param {!string} id - The id of the Logger instance to delete from\n     * container.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_delete\",\n    value: function _delete(id) {\n      this.loggers.delete(id);\n    }\n  }]);\n  return Container;\n}();","map":null,"metadata":{},"sourceType":"script"}