{"ast":null,"code":"/**\n * http.js: Transport for outputting to a json-rpcserver.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar http = require('http');\nvar https = require('https');\nvar _require = require('readable-stream'),\n  Stream = _require.Stream;\nvar TransportStream = require('winston-transport');\n/**\n * Transport for outputting to a json-rpc server.\n * @type {Stream}\n * @extends {TransportStream}\n */\n\nmodule.exports = /*#__PURE__*/\nfunction (_TransportStream) {\n  _inherits(Http, _TransportStream);\n\n  /**\n   * Constructor function for the Http transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  function Http() {\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Http);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Http).call(this, options));\n    _this.name = options.name || 'http';\n    _this.ssl = !!options.ssl;\n    _this.host = options.host || 'localhost';\n    _this.port = options.port;\n    _this.auth = options.auth;\n    _this.path = options.path || '';\n    _this.agent = options.agent;\n    _this.headers = options.headers || {};\n    _this.headers['content-type'] = 'application/json';\n    if (!_this.port) {\n      _this.port = _this.ssl ? 443 : 80;\n    }\n    return _this;\n  }\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n\n  _createClass(Http, [{\n    key: \"log\",\n    value: function log(info, callback) {\n      var _this2 = this;\n      this._request(info, function (err, res) {\n        if (res && res.statusCode !== 200) {\n          err = new Error(\"Invalid HTTP Status Code: \".concat(res.statusCode));\n        }\n        if (err) {\n          _this2.emit('warn', err);\n        } else {\n          _this2.emit('logged', info);\n        }\n      }); // Remark: (jcrugzz) Fire and forget here so requests dont cause buffering\n      // and block more requests from happening?\n\n      if (callback) {\n        setImmediate(callback);\n      }\n    }\n    /**\n     * Query the transport. Options object is optional.\n     * @param {Object} options -  Loggly-like query options for this instance.\n     * @param {function} callback - Continuation to respond to when complete.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"query\",\n    value: function query(options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options = {\n        method: 'query',\n        params: this.normalizeQuery(options)\n      };\n      if (options.params.path) {\n        options.path = options.params.path;\n        delete options.params.path;\n      }\n      if (options.params.auth) {\n        options.auth = options.params.auth;\n        delete options.params.auth;\n      }\n      this._request(options, function (err, res, body) {\n        if (res && res.statusCode !== 200) {\n          err = new Error(\"Invalid HTTP Status Code: \".concat(res.statusCode));\n        }\n        if (err) {\n          return callback(err);\n        }\n        if (typeof body === 'string') {\n          try {\n            body = JSON.parse(body);\n          } catch (e) {\n            return callback(e);\n          }\n        }\n        callback(null, body);\n      });\n    }\n    /**\n     * Returns a log stream for this transport. Options object is optional.\n     * @param {Object} options - Stream options for this instance.\n     * @returns {Stream} - TODO: add return description\n     */\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var stream = new Stream();\n      options = {\n        method: 'stream',\n        params: options\n      };\n      if (options.params.path) {\n        options.path = options.params.path;\n        delete options.params.path;\n      }\n      if (options.params.auth) {\n        options.auth = options.params.auth;\n        delete options.params.auth;\n      }\n      var buff = '';\n      var req = this._request(options);\n      stream.destroy = function () {\n        return req.destroy();\n      };\n      req.on('data', function (data) {\n        data = (buff + data).split(/\\n+/);\n        var l = data.length - 1;\n        var i = 0;\n        for (; i < l; i++) {\n          try {\n            stream.emit('log', JSON.parse(data[i]));\n          } catch (e) {\n            stream.emit('error', e);\n          }\n        }\n        buff = data[l];\n      });\n      req.on('error', function (err) {\n        return stream.emit('error', err);\n      });\n      return stream;\n    }\n    /**\n     * Make a request to a winstond server or any http server which can\n     * handle json-rpc.\n     * @param {function} options - Options to sent the request.\n     * @param {function} callback - Continuation to respond to when complete.\n     */\n  }, {\n    key: \"_request\",\n    value: function _request(options, callback) {\n      options = options || {};\n      var auth = options.auth || this.auth;\n      var path = options.path || this.path || '';\n      delete options.auth;\n      delete options.path; // Prepare options for outgoing HTTP request\n\n      var req = (this.ssl ? https : http).request({\n        method: 'POST',\n        host: this.host,\n        port: this.port,\n        path: \"/\".concat(path.replace(/^\\//, '')),\n        headers: this.headers,\n        auth: auth ? \"\".concat(auth.username, \":\").concat(auth.password) : '',\n        agent: this.agent\n      });\n      req.on('error', callback);\n      req.on('response', function (res) {\n        return res.on('end', function () {\n          return callback(null, res);\n        }).resume();\n      });\n      req.end(Buffer.from(JSON.stringify(options), 'utf8'));\n    }\n  }]);\n  return Http;\n}(TransportStream);","map":null,"metadata":{},"sourceType":"script"}