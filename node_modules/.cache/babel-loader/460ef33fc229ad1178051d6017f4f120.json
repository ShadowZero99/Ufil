{"ast":null,"code":"/**\n * stream.js: Transport for outputting to any arbitrary stream.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar isStream = require('is-stream');\nvar _require = require('triple-beam'),\n  MESSAGE = _require.MESSAGE;\nvar os = require('os');\nvar TransportStream = require('winston-transport');\n/**\n * Transport for outputting to any arbitrary stream.\n * @type {Stream}\n * @extends {TransportStream}\n */\n\nmodule.exports = /*#__PURE__*/\nfunction (_TransportStream) {\n  _inherits(Stream, _TransportStream);\n\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  function Stream() {\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Stream);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Stream).call(this, options));\n    if (!options.stream || !isStream(options.stream)) {\n      throw new Error('options.stream is required.');\n    } // We need to listen for drain events when write() returns false. This can\n    // make node mad at times.\n\n    _this._stream = options.stream;\n    _this._stream.setMaxListeners(Infinity);\n    _this.isObjectMode = options.stream._writableState.objectMode;\n    _this.eol = options.eol || os.EOL;\n    return _this;\n  }\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n\n  _createClass(Stream, [{\n    key: \"log\",\n    value: function log(info, callback) {\n      var _this2 = this;\n      setImmediate(function () {\n        return _this2.emit('logged', info);\n      });\n      if (this.isObjectMode) {\n        this._stream.write(info);\n        if (callback) {\n          callback(); // eslint-disable-line callback-return\n        }\n\n        return;\n      }\n      this._stream.write(\"\".concat(info[MESSAGE]).concat(this.eol));\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n\n      return;\n    }\n  }]);\n  return Stream;\n}(TransportStream);","map":null,"metadata":{},"sourceType":"script"}