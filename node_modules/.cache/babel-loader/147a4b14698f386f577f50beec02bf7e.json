{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar _require = require('./colorize'),\n  Colorizer = _require.Colorizer;\nvar _require2 = require('./pad-levels'),\n  Padder = _require2.Padder;\nvar _require3 = require('triple-beam'),\n  configs = _require3.configs,\n  MESSAGE = _require3.MESSAGE;\n/**\n * Cli format class that handles initial state for a a separate\n * Colorizer and Padder instance.\n */\n\nvar CliFormat = /*#__PURE__*/\nfunction () {\n  function CliFormat() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, CliFormat);\n    if (!opts.levels) {\n      opts.levels = configs.npm.levels;\n    }\n    this.colorizer = new Colorizer(opts);\n    this.padder = new Padder(opts);\n    this.options = opts;\n  }\n  /*\n   * function transform (info, opts)\n   * Attempts to both:\n   * 1. Pad the { level }\n   * 2. Colorize the { level, message }\n   * of the given `logform` info object depending on the `opts`.\n   */\n\n  _createClass(CliFormat, [{\n    key: \"transform\",\n    value: function transform(info, opts) {\n      this.colorizer.transform(this.padder.transform(info, opts), opts);\n      info[MESSAGE] = \"\".concat(info.level, \":\").concat(info.message);\n      return info;\n    }\n  }]);\n  return CliFormat;\n}();\n/*\n * function cli (opts)\n * Returns a new instance of the CLI format that turns a log\n * `info` object into the same format previously available\n * in `winston.cli()` in `winston < 3.0.0`.\n */\n\nmodule.exports = function (opts) {\n  return new CliFormat(opts);\n}; //\n// Attach the CliFormat for registration purposes\n//\n\nmodule.exports.Format = CliFormat;","map":null,"metadata":{},"sourceType":"script"}