{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:\\\\Users\\\\PC\\\\OneDrive\\\\Desktop\\\\ufil\\\\ufil\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\PC\\\\OneDrive\\\\Desktop\\\\ufil\\\\ufil\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\PC\\\\OneDrive\\\\Desktop\\\\ufil\\\\ufil\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar path = require('path');\nvar os = require('os');\nvar fs = require('graceful-fs');\nvar makeDir = require('make-dir');\nvar xdgBasedir = require('xdg-basedir');\nvar writeFileAtomic = require('write-file-atomic');\nvar dotProp = require('dot-prop');\nvar uniqueString = require('unique-string');\nvar configDirectory = xdgBasedir.config || path.join(os.tmpdir(), uniqueString());\nvar permissionError = 'You don\\'t have access to this file.';\nvar makeDirOptions = {\n  mode: 448\n};\nvar writeFileOptions = {\n  mode: 384\n};\nvar Configstore = /*#__PURE__*/function () {\n  function Configstore(id, defaults) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, Configstore);\n    var pathPrefix = options.globalConfigPath ? path.join(id, 'config.json') : path.join('configstore', \"\".concat(id, \".json\"));\n    this.path = options.configPath || path.join(configDirectory, pathPrefix);\n    if (defaults) {\n      this.all = _objectSpread({}, defaults, this.all);\n    }\n  }\n  _createClass(Configstore, [{\n    key: \"get\",\n    value: function get(key) {\n      return dotProp.get(this.all, key);\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var config = this.all;\n      if (arguments.length === 1) {\n        for (var _i = 0, _Object$keys = Object.keys(key); _i < _Object$keys.length; _i++) {\n          var k = _Object$keys[_i];\n          dotProp.set(config, k, key[k]);\n        }\n      } else {\n        dotProp.set(config, key, value);\n      }\n      this.all = config;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return dotProp.has(this.all, key);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      var config = this.all;\n      dotProp.delete(config, key);\n      this.all = config;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.all = {};\n    }\n  }, {\n    key: \"all\",\n    get: function get() {\n      try {\n        return JSON.parse(fs.readFileSync(this.path, 'utf8'));\n      } catch (error) {\n        // Create directory if it doesn't exist\n        if (error.code === 'ENOENT') {\n          return {};\n        }\n\n        // Improve the message of permission errors\n        if (error.code === 'EACCES') {\n          error.message = \"\".concat(error.message, \"\\n\").concat(permissionError, \"\\n\");\n        }\n\n        // Empty the file if it encounters invalid JSON\n        if (error.name === 'SyntaxError') {\n          writeFileAtomic.sync(this.path, '', writeFileOptions);\n          return {};\n        }\n        throw error;\n      }\n    },\n    set: function set(value) {\n      try {\n        // Make sure the folder exists as it could have been deleted in the meantime\n        makeDir.sync(path.dirname(this.path), makeDirOptions);\n        writeFileAtomic.sync(this.path, JSON.stringify(value, undefined, '\\t'), writeFileOptions);\n      } catch (error) {\n        // Improve the message of permission errors\n        if (error.code === 'EACCES') {\n          error.message = \"\".concat(error.message, \"\\n\").concat(permissionError, \"\\n\");\n        }\n        throw error;\n      }\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return Object.keys(this.all || {}).length;\n    }\n  }]);\n  return Configstore;\n}();\nmodule.exports = Configstore;","map":null,"metadata":{},"sourceType":"script"}