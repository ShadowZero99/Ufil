{"ast":null,"code":"/**\n * winston.js: Top-level include defining Winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nvar logform = require('logform');\nvar _require = require('./winston/common'),\n  warn = _require.warn;\n/**\n * Setup to expose.\n * @type {Object}\n */\n\nvar winston = exports;\n/**\n * Expose version. Use `require` method for `webpack` support.\n * @type {string}\n */\n\nwinston.version = require('../package.json').version;\n/**\n * Include transports defined by default by winston\n * @type {Array}\n */\n\nwinston.transports = require('./winston/transports');\n/**\n * Expose utility methods\n * @type {Object}\n */\n\nwinston.config = require('./winston/config');\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */\n\nwinston.addColors = logform.levels;\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */\n\nwinston.format = logform.format;\n/**\n * Expose core Logging-related prototypes.\n * @type {function}\n */\n\nwinston.createLogger = require('./winston/create-logger');\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */\n\nwinston.ExceptionHandler = require('./winston/exception-handler');\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */\n\nwinston.RejectionHandler = require('./winston/rejection-handler');\n/**\n * Expose core Logging-related prototypes.\n * @type {Container}\n */\n\nwinston.Container = require('./winston/container');\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */\n\nwinston.Transport = require('winston-transport');\n/**\n * We create and expose a default `Container` to `winston.loggers` so that the\n * programmer may manage multiple `winston.Logger` instances without any\n * additional overhead.\n * @example\n *   // some-file1.js\n *   const logger = require('winston').loggers.get('something');\n *\n *   // some-file2.js\n *   const logger = require('winston').loggers.get('something');\n */\n\nwinston.loggers = new winston.Container();\n/**\n * We create and expose a 'defaultLogger' so that the programmer may do the\n * following without the need to create an instance of winston.Logger directly:\n * @example\n *   const winston = require('winston');\n *   winston.log('info', 'some message');\n *   winston.error('some error');\n */\n\nvar defaultLogger = winston.createLogger(); // Pass through the target methods onto `winston.\n\nObject.keys(winston.config.npm.levels).concat(['log', 'query', 'stream', 'add', 'remove', 'clear', 'profile', 'startTimer', 'handleExceptions', 'unhandleExceptions', 'handleRejections', 'unhandleRejections', 'configure']).forEach(function (method) {\n  return winston[method] = function () {\n    return defaultLogger[method].apply(defaultLogger, arguments);\n  };\n});\n/**\n * Define getter / setter for the default logger level which need to be exposed\n * by winston.\n * @type {string}\n */\n\nObject.defineProperty(winston, 'level', {\n  get: function get() {\n    return defaultLogger.level;\n  },\n  set: function set(val) {\n    defaultLogger.level = val;\n  }\n});\n/**\n * Define getter for `exceptions` which replaces `handleExceptions` and\n * `unhandleExceptions`.\n * @type {Object}\n */\n\nObject.defineProperty(winston, 'exceptions', {\n  get: function get() {\n    return defaultLogger.exceptions;\n  }\n});\n/**\n * Define getters / setters for appropriate properties of the default logger\n * which need to be exposed by winston.\n * @type {Logger}\n */\n\n['exitOnError'].forEach(function (prop) {\n  Object.defineProperty(winston, prop, {\n    get: function get() {\n      return defaultLogger[prop];\n    },\n    set: function set(val) {\n      defaultLogger[prop] = val;\n    }\n  });\n});\n/**\n * The default transports and exceptionHandlers for the default winston logger.\n * @type {Object}\n */\n\nObject.defineProperty(winston, 'default', {\n  get: function get() {\n    return {\n      exceptionHandlers: defaultLogger.exceptionHandlers,\n      rejectionHandlers: defaultLogger.rejectionHandlers,\n      transports: defaultLogger.transports\n    };\n  }\n}); // Have friendlier breakage notices for properties that were exposed by default\n// on winston < 3.0.\n\nwarn.deprecated(winston, 'setLevels');\nwarn.forFunctions(winston, 'useFormat', ['cli']);\nwarn.forProperties(winston, 'useFormat', ['padLevels', 'stripColors']);\nwarn.forFunctions(winston, 'deprecated', ['addRewriter', 'addFilter', 'clone', 'extend']);\nwarn.forProperties(winston, 'deprecated', ['emitErrs', 'levelLength']); // Throw a useful error when users attempt to run `new winston.Logger`.\n\nwarn.moved(winston, 'createLogger', 'Logger');","map":null,"metadata":{},"sourceType":"script"}