{"ast":null,"code":"/* eslint no-unused-vars: 0 */\n'use strict';\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar _require = require('triple-beam'),\n  configs = _require.configs,\n  LEVEL = _require.LEVEL,\n  MESSAGE = _require.MESSAGE;\nvar Padder = /*#__PURE__*/\nfunction () {\n  function Padder() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      levels: configs.npm.levels\n    };\n    _classCallCheck(this, Padder);\n    this.paddings = Padder.paddingForLevels(opts.levels, opts.filler);\n    this.options = opts;\n  }\n  /**\n   * Returns the maximum length of keys in the specified `levels` Object.\n   * @param  {Object} levels Set of all levels to calculate longest level against.\n   * @returns {Number} Maximum length of the longest level string.\n   */\n\n  _createClass(Padder, [{\n    key: \"transform\",\n    /**\n     * Prepends the padding onto the `message` based on the `LEVEL` of\n     * the `info`. This is based on the behavior of `winston@2` which also\n     * prepended the level onto the message.\n     *\n     * See: https://github.com/winstonjs/winston/blob/2.x/lib/winston/logger.js#L198-L201\n     *\n     * @param  {Info} info Logform info object\n     * @param  {Object} opts Options passed along to this instance.\n     * @returns {Info} Modified logform info object.\n     */\n    value: function transform(info, opts) {\n      info.message = \"\".concat(this.paddings[info[LEVEL]]).concat(info.message);\n      if (info[MESSAGE]) {\n        info[MESSAGE] = \"\".concat(this.paddings[info[LEVEL]]).concat(info[MESSAGE]);\n      }\n      return info;\n    }\n  }], [{\n    key: \"getLongestLevel\",\n    value: function getLongestLevel(levels) {\n      var lvls = Object.keys(levels).map(function (level) {\n        return level.length;\n      });\n      return Math.max.apply(Math, _toConsumableArray(lvls));\n    }\n    /**\n     * Returns the padding for the specified `level` assuming that the\n     * maximum length of all levels it's associated with is `maxLength`.\n     * @param  {String} level Level to calculate padding for.\n     * @param  {String} filler Repeatable text to use for padding.\n     * @param  {Number} maxLength Length of the longest level\n     * @returns {String} Padding string for the `level`\n     */\n  }, {\n    key: \"paddingForLevel\",\n    value: function paddingForLevel(level, filler, maxLength) {\n      var targetLen = maxLength + 1 - level.length;\n      var rep = Math.floor(targetLen / filler.length);\n      var padding = \"\".concat(filler).concat(filler.repeat(rep));\n      return padding.slice(0, targetLen);\n    }\n    /**\n     * Returns an object with the string paddings for the given `levels`\n     * using the specified `filler`.\n     * @param  {Object} levels Set of all levels to calculate padding for.\n     * @param  {String} filler Repeatable text to use for padding.\n     * @returns {Object} Mapping of level to desired padding.\n     */\n  }, {\n    key: \"paddingForLevels\",\n    value: function paddingForLevels(levels) {\n      var filler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n      var maxLength = Padder.getLongestLevel(levels);\n      return Object.keys(levels).reduce(function (acc, level) {\n        acc[level] = Padder.paddingForLevel(level, filler, maxLength);\n        return acc;\n      }, {});\n    }\n  }]);\n  return Padder;\n}();\n/*\n * function padLevels (info)\n * Returns a new instance of the padLevels Format which pads\n * levels to be the same length. This was previously exposed as\n * { padLevels: true } to transports in `winston < 3.0.0`.\n */\n\nmodule.exports = function (opts) {\n  return new Padder(opts);\n};\nmodule.exports.Padder = module.exports.Format = Padder;","map":{"version":3,"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","_require","require","configs","LEVEL","MESSAGE","Padder","opts","arguments","undefined","levels","npm","paddings","paddingForLevels","filler","options","value","transform","info","message","concat","getLongestLevel","lvls","keys","map","level","Math","max","apply","paddingForLevel","maxLength","targetLen","rep","floor","padding","repeat","slice","reduce","acc","module","exports","Format"],"sources":["C:/Users/PC/node_modules/firebase-tools/node_modules/logform/dist/pad-levels.js"],"sourcesContent":["/* eslint no-unused-vars: 0 */\n'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('triple-beam'),\n    configs = _require.configs,\n    LEVEL = _require.LEVEL,\n    MESSAGE = _require.MESSAGE;\n\nvar Padder =\n/*#__PURE__*/\nfunction () {\n  function Padder() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      levels: configs.npm.levels\n    };\n\n    _classCallCheck(this, Padder);\n\n    this.paddings = Padder.paddingForLevels(opts.levels, opts.filler);\n    this.options = opts;\n  }\n  /**\n   * Returns the maximum length of keys in the specified `levels` Object.\n   * @param  {Object} levels Set of all levels to calculate longest level against.\n   * @returns {Number} Maximum length of the longest level string.\n   */\n\n\n  _createClass(Padder, [{\n    key: \"transform\",\n\n    /**\n     * Prepends the padding onto the `message` based on the `LEVEL` of\n     * the `info`. This is based on the behavior of `winston@2` which also\n     * prepended the level onto the message.\n     *\n     * See: https://github.com/winstonjs/winston/blob/2.x/lib/winston/logger.js#L198-L201\n     *\n     * @param  {Info} info Logform info object\n     * @param  {Object} opts Options passed along to this instance.\n     * @returns {Info} Modified logform info object.\n     */\n    value: function transform(info, opts) {\n      info.message = \"\".concat(this.paddings[info[LEVEL]]).concat(info.message);\n\n      if (info[MESSAGE]) {\n        info[MESSAGE] = \"\".concat(this.paddings[info[LEVEL]]).concat(info[MESSAGE]);\n      }\n\n      return info;\n    }\n  }], [{\n    key: \"getLongestLevel\",\n    value: function getLongestLevel(levels) {\n      var lvls = Object.keys(levels).map(function (level) {\n        return level.length;\n      });\n      return Math.max.apply(Math, _toConsumableArray(lvls));\n    }\n    /**\n     * Returns the padding for the specified `level` assuming that the\n     * maximum length of all levels it's associated with is `maxLength`.\n     * @param  {String} level Level to calculate padding for.\n     * @param  {String} filler Repeatable text to use for padding.\n     * @param  {Number} maxLength Length of the longest level\n     * @returns {String} Padding string for the `level`\n     */\n\n  }, {\n    key: \"paddingForLevel\",\n    value: function paddingForLevel(level, filler, maxLength) {\n      var targetLen = maxLength + 1 - level.length;\n      var rep = Math.floor(targetLen / filler.length);\n      var padding = \"\".concat(filler).concat(filler.repeat(rep));\n      return padding.slice(0, targetLen);\n    }\n    /**\n     * Returns an object with the string paddings for the given `levels`\n     * using the specified `filler`.\n     * @param  {Object} levels Set of all levels to calculate padding for.\n     * @param  {String} filler Repeatable text to use for padding.\n     * @returns {Object} Mapping of level to desired padding.\n     */\n\n  }, {\n    key: \"paddingForLevels\",\n    value: function paddingForLevels(levels) {\n      var filler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n      var maxLength = Padder.getLongestLevel(levels);\n      return Object.keys(levels).reduce(function (acc, level) {\n        acc[level] = Padder.paddingForLevel(level, filler, maxLength);\n        return acc;\n      }, {});\n    }\n  }]);\n\n  return Padder;\n}();\n/*\n * function padLevels (info)\n * Returns a new instance of the padLevels Format which pads\n * levels to be the same length. This was previously exposed as\n * { padLevels: true } to transports in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new Padder(opts);\n};\n\nmodule.exports.Padder = module.exports.Format = Padder;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}